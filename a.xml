<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">skywang12345</title>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3603935.html</id>
    <title type="text">            &lt;span&gt;[置顶]&lt;/span&gt;
        数据结构与算法系列 目录</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3603935.html"/>
    <content type="html">摘要：最近抽空整理了&amp;quot;数据结构和算法&amp;quot;的相关文章。在整理过程中，对于每种数据结构和算法分别给出&amp;quot;C&amp;quot;、&amp;quot;C++&amp;quot;和&amp;quot;Java&amp;quot;这三种语言的实现；实现语言虽不同，但原理如出一辙。因此，读者在了解和学习的过程中，择其一即可！下面是整理数据数据和算法的目录表，对于每一种按照C/C++/Java进行了划分，方便查...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3603935.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/java_threads_category.html</id>
    <title type="text">            &lt;span&gt;[置顶]&lt;/span&gt;
        Java多线程系列目录(共43篇)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/java_threads_category.html"/>
    <content type="html">摘要：最近，在研究Java多线程的内容目录，将其内容逐步整理并发布。(一) 基础篇01.Java多线程系列--“基础篇”01之 基本概念02.Java多线程系列--“基础篇”02之 常用的实现多线程的两种方式03.Java多线程系列--“基础篇”03之 Thread中start()和run()的区别04.Java多线程系列--“基础篇”04之 synchronized关键字05.Java多线程系列--“基础篇”05之 线程等待与唤醒06.Java多线程系列--“基础篇”06之 线程让步07.Java多线程系列--“基础篇”07之 线程休眠08.Java多线程系列--“基础篇”08之 join()09        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/java_threads_category.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3323085.html</id>
    <title type="text">            &lt;span&gt;[置顶]&lt;/span&gt;
        Java 集合系列目录(Category)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3323085.html"/>
    <content type="html">摘要：下面是最近总结的Java集合(JDK1.6.0_45)相关文章的目录。01.Java 集合系列01之 总体框架02.Java 集合系列02之 Collection架构03.Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例04.Java 集合系列04之 fail-fast总结(通过ArrayList来说明fail-fast的原理、解决办法)05.Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例06.Java 集合系列06之 Vector详细介绍(源码解析)和使用示例07.Java 集合系列07之 Stack详细介绍(源码解析)和使用示例08.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3323085.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html</id>
    <title type="text">            &lt;span&gt;[置顶]&lt;/span&gt;
        skywang的博客目录(持续更新中...)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html"/>
    <content type="html">摘要：Java 知识知识点01.Java 随机数02,Java hashCode() 和 equals()的若干问题解答03,Java 中 Comparable 和 Comparator 比较04.Java Annotation认知(包括框架图、详细介绍、示例说明)05.Java引用总结--StrongReference、SoftReference、WeakReference、PhantomReference系列专题的目录01. Java String系列 (共3篇)02.Java异常系列 (共3篇)03.Java 时间日期系列(共7篇)04.java io系列 (共26篇)05...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711532.html</id>
    <title type="text">        Floyd算法(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711532.html"/>
    <content type="html">摘要：前面分别通过C和C++实现了弗洛伊德算法，本文介绍弗洛伊德算法的Java实现。目录 1. 弗洛伊德算法介绍 2. 弗洛伊德算法图解 3. 弗洛伊德算法的代码说明 4. 弗洛伊德算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711532.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711526.html</id>
    <title type="text">        Floyd算法(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711526.html"/>
    <content type="html">摘要：本章是弗洛伊德算法的C++实现。目录 1. 弗洛伊德算法介绍 2. 弗洛伊德算法图解 3. 弗洛伊德算法的代码说明 4. 弗洛伊德算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 弗洛伊德算法介绍和Dijkstr...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711526.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711523.html</id>
    <title type="text">        Floyd算法(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711523.html"/>
    <content type="html">摘要：本章介绍弗洛伊德算法。和以往一样，本文会先对弗洛伊德算法的理论论知识进行介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现。目录 1. 弗洛伊德算法介绍 2. 弗洛伊德算法图解 3. 弗洛伊德算法的代码说明 4. 弗洛伊德算法的源码 转载请注明出处：http://www.cnbl...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711523.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711516.html</id>
    <title type="text">        Dijkstra算法(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711516.html"/>
    <content type="html">摘要：前面分别通过C和C++实现了迪杰斯特拉算法，本文介绍迪杰斯特拉算法的Java实现。目录 1. 迪杰斯特拉算法介绍 2. 迪杰斯特拉算法图解 3. 迪杰斯特拉算法的代码说明 4. 迪杰斯特拉算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711516.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711514.html</id>
    <title type="text">        Dijkstra算法(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711514.html"/>
    <content type="html">摘要：本章是迪杰斯特拉算法的C++实现。目录 1. 迪杰斯特拉算法介绍 2. 迪杰斯特拉算法图解 3. 迪杰斯特拉算法的代码说明 4. 迪杰斯特拉算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 迪杰斯特拉算法介绍迪杰...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711514.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711512.html</id>
    <title type="text">        Dijkstra算法(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711512.html"/>
    <content type="html">摘要：本章介绍迪杰斯特拉算法。和以往一样，本文会先对迪杰斯特拉算法的理论论知识进行介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现。目录 1. 迪杰斯特拉算法介绍 2. 迪杰斯特拉算法图解 3. 迪杰斯特拉算法的代码说明 4. 迪杰斯特拉算法的源码 转载请注明出处：http://ww...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711512.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711510.html</id>
    <title type="text">        Prim算法(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711510.html"/>
    <content type="html">摘要：前面分别通过C和C++实现了普里姆，本文介绍普里姆的Java实现。目录 1. 普里姆算法介绍 2. 普里姆算法图解 3. 普里姆算法的代码说明 4. 普里姆算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 普里姆...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711510.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711507.html</id>
    <title type="text">        Prim算法(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711507.html"/>
    <content type="html">摘要：本章是普里姆算法的C++实现。目录 1. 普里姆算法介绍 2. 普里姆算法图解 3. 普里姆算法的代码说明 4. 普里姆算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 普里姆算法介绍普里姆(Prim)算法，是用...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711507.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711506.html</id>
    <title type="text">        Prim算法(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711506.html"/>
    <content type="html">摘要：本章介绍普里姆算法。和以往一样，本文会先对普里姆算法的理论论知识进行介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现。目录 1. 普里姆算法介绍 2. 普里姆算法图解 3. 普里姆算法的代码说明 4. 普里姆算法的源码 转载请注明出处：http://www.cnblogs.co...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711506.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711504.html</id>
    <title type="text">        Kruskal算法(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711504.html"/>
    <content type="html">摘要：前面分别通过C和C++实现了克鲁斯卡尔，本文介绍克鲁斯卡尔的Java实现。目录 1. 最小生成树 2. 克鲁斯卡尔算法介绍 3. 克鲁斯卡尔算法图解 4. 克鲁斯卡尔算法分析 5. 克鲁斯卡尔算法的代码说明 6. 克鲁斯卡尔算法的源码 转载请注明出处：http://www.cnblogs.com/...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711504.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711500.html</id>
    <title type="text">        Kruskal算法(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711500.html"/>
    <content type="html">摘要：本章是克鲁斯卡尔算法的C++实现。目录 1. 最小生成树 2. 克鲁斯卡尔算法介绍 3. 克鲁斯卡尔算法图解 4. 克鲁斯卡尔算法分析 5. 克鲁斯卡尔算法的代码说明 6. 克鲁斯卡尔算法的源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711500.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711496.html</id>
    <title type="text">        Kruskal算法(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711496.html"/>
    <content type="html">摘要：本章介绍克鲁斯卡尔算法。和以往一样，本文会先对克鲁斯卡尔算法的理论论知识进行介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现。目录 1. 最小生成树 2. 克鲁斯卡尔算法介绍 3. 克鲁斯卡尔算法图解 4. 克鲁斯卡尔算法分析 5. 克鲁斯卡尔算法的代码说明 6. 克鲁斯卡尔算法...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711496.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711494.html</id>
    <title type="text">        拓扑排序(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711494.html"/>
    <content type="html">摘要：前面分别介绍了拓扑排序的C和C++实现，本文通过Java实现拓扑排序。目录 1. 拓扑排序介绍 2. 拓扑排序的算法图解 3. 拓扑排序的代码说明 4. 拓扑排序的完整源码和测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711494.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711493.html</id>
    <title type="text">        拓扑排序(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711493.html"/>
    <content type="html">摘要：本章是通过C++实现拓扑排序。目录 1. 拓扑排序介绍 2. 拓扑排序的算法图解 3. 拓扑排序的代码说明 4. 拓扑排序的完整源码和测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 拓扑排序介绍拓扑排序(Topolo...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711493.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711489.html</id>
    <title type="text">        拓扑排序(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711489.html"/>
    <content type="html">摘要：本章介绍图的拓扑排序。和以往一样，本文会先对拓扑排序的理论知识进行介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现。目录 1. 拓扑排序介绍 2. 拓扑排序的算法图解 3. 拓扑排序的代码说明 4. 拓扑排序的完整源码和测试程序转载请注明出处：http://www.cnblogs...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711489.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3711483.html</id>
    <title type="text">        图的遍历之 深度优先搜索和广度优先搜索</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3711483.html"/>
    <content type="html">摘要：本章会先对图的深度优先搜索和广度优先搜索进行介绍，然后再给出C/C++/Java的实现。目录 1. 深度优先搜索的图文介绍 1.1 深度优先搜索介绍 1.2 深度优先搜索图解 2. 广度优先搜索的图文介绍 2.1 广度优先搜索介绍 2.2 广度优先搜索图解 3. 搜索算法的源码转载请注明出处：htt...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711483.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707626.html</id>
    <title type="text">        邻接表有向图(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707626.html"/>
    <content type="html">摘要：前面分别介绍了邻接表有向图的C和C++实现，本文通过Java实现邻接表有向图。目录 1. 邻接表有向图的介绍 2. 邻接表有向图的代码说明 3. 邻接表有向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707626.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707624.html</id>
    <title type="text">        邻接表有向图(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707624.html"/>
    <content type="html">摘要：本章是通过C++实现邻接表有向图。目录 1. 邻接表有向图的介绍 2. 邻接表有向图的代码说明 3. 邻接表有向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接表有向图的介绍邻接表有向图是指通过邻接表表示...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707624.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707621.html</id>
    <title type="text">        邻接表有向图(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707621.html"/>
    <content type="html">摘要：本章介绍邻接表有向图。在&amp;quot;图的理论基础&amp;quot;中已经对图进行了理论介绍，这里就不再对图的概念进行重复说明了。和以往一样，本文会先给出C语言的实现；后续再分别给出C++和Java版本的实现。实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录 1. 邻接...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707621.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707618.html</id>
    <title type="text">        邻接矩阵有向图(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707618.html"/>
    <content type="html">摘要：前面分别介绍了邻接矩阵有向图的C和C++实现，本文通过Java实现邻接矩阵有向图。目录 1. 邻接矩阵有向图的介绍 2. 邻接矩阵有向图的代码说明 3. 邻接矩阵有向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707618.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707616.html</id>
    <title type="text">        邻接矩阵有向图(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707616.html"/>
    <content type="html">摘要：本章是通过C++实现邻接矩阵有向图。目录 1. 邻接矩阵有向图的介绍 2. 邻接矩阵有向图的代码说明 3. 邻接矩阵有向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接矩阵有向图的介绍邻接矩阵有向图是指通...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707616.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707614.html</id>
    <title type="text">        邻接矩阵有向图(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707614.html"/>
    <content type="html">摘要：本章介绍邻接矩阵有向图。在&amp;quot;图的理论基础&amp;quot;中已经对图进行了理论介绍，这里就不再对图的概念进行重复说明了。和以往一样，本文会先给出C语言的实现；后续再分别给出C++和Java版本的实现。实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录 1. 邻...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707614.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707612.html</id>
    <title type="text">        邻接表无向图(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707612.html"/>
    <content type="html">摘要：前面分别介绍了邻接表无向图的C和C++实现，本文通过Java实现邻接表无向图。目录 1. 邻接表无向图的介绍 2. 邻接表无向图的代码说明 3. 邻接表无向图的完整源码转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接表无...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707612.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707610.html</id>
    <title type="text">        邻接表无向图(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707610.html"/>
    <content type="html">摘要：本章是通过C++实现邻接表无向图。目录 1. 邻接表无向图的介绍 2. 邻接表无向图的代码说明 3. 邻接表无向图的完整源码转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接表无向图的介绍邻接表无向图是指通过邻接表表示的无...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707610.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707607.html</id>
    <title type="text">        邻接表无向图(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707607.html"/>
    <content type="html">摘要：本章介绍邻接表无向图。在&amp;quot;图的理论基础&amp;quot;中已经对图进行了理论介绍，这里就不再对图的概念进行重复说明了。和以往一样，本文会先给出C语言的实现；后续再分别给出C++和Java版本的实现。实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录 1. 邻接...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707607.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707604.html</id>
    <title type="text">        邻接矩阵无向图(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707604.html"/>
    <content type="html">摘要：前面分别介绍了邻接矩阵无向图的C和C++实现，本文通过Java实现邻接矩阵无向图。目录 1. 邻接矩阵无向图的介绍 2. 邻接矩阵无向图的代码说明 3. 邻接矩阵无向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707604.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707599.html</id>
    <title type="text">        邻接矩阵无向图(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707599.html"/>
    <content type="html">摘要：本章是通过C++实现邻接矩阵无向图。目录 1. 邻接矩阵无向图的介绍 2. 邻接矩阵无向图的代码说明 3. 邻接矩阵无向图的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 邻接矩阵无向图的介绍邻接矩阵无向图是指通...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707599.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3707597.html</id>
    <title type="text">        邻接矩阵无向图(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3707597.html"/>
    <content type="html">摘要：本章介绍邻接矩阵无向图。在&amp;quot;图的理论基础&amp;quot;中已经对图进行了理论介绍，这里就不再对图的概念进行重复说明了。和以往一样，本文会先给出C语言的实现；后续再分别给出C++和Java版本的实现。实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录 1. 邻...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3707597.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3691463.html</id>
    <title type="text">        图的理论基础</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3691463.html"/>
    <content type="html">摘要：本章介绍数据结构中图的基本概念。目录 1. 图的基本概念 2. 图的存储结构 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录 图的基本概念1. 图的定义定义：图(graph)是由一些点(vertex)和这些点之间的连线(e...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3691463.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3706833.html</id>
    <title type="text">        哈夫曼树(三)之 Java详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3706833.html"/>
    <content type="html">摘要：前面分别通过C和C++实现了哈夫曼树，本章给出哈夫曼树的java版本。目录 1. 哈夫曼树的介绍 2. 哈夫曼树的图文解析 3. 哈夫曼树的基本操作 4. 哈夫曼树的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结构与算法系列 目录...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3706833.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3706821.html</id>
    <title type="text">        哈夫曼树(二)之 C++详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3706821.html"/>
    <content type="html">摘要：上一章介绍了哈夫曼树的基本概念，并通过C语言实现了哈夫曼树。本章是哈夫曼树的C++实现。目录 1. 哈夫曼树的介绍 2. 哈夫曼树的图文解析 3. 哈夫曼树的基本操作 4. 哈夫曼树的完整源码 转载请注明出处：http://www.cnblogs.com/skywang12345/更多内容：数据结...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3706821.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3706370.html</id>
    <title type="text">        哈夫曼树(一)之 C语言详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3706370.html"/>
    <content type="html">摘要：本章介绍哈夫曼树。和以往一样，本文会先对哈夫曼树的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请帮忙指出！ 目录 1. 哈夫曼树的介绍 2. 哈夫曼树的图文解析 3. 哈...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3706370.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3603669.html</id>
    <title type="text">        基数排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3603669.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的基数排序。内容包括：1.基数排序介绍2.基数排序图文说明3.基数排序实现3.1基数排序C实现3.2基数排序C++实现3.3基数排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3603669.html更多排序和算法请参...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3603669.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3602737.html</id>
    <title type="text">        桶排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3602737.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的桶排序。内容包括：1.桶排序介绍2.桶排序图文说明3.桶排序实现3.1 桶排序C实现3.2 桶排序C++实现3.3 桶排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3602737.html更多排序和算法请参考：数据...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3602737.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3602369.html</id>
    <title type="text">        归并排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3602369.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的归并排序。内容包括：1.归并排序介绍2.归并排序图文说明3.归并排序的时间复杂度和稳定性4.归并排序实现4.1 归并排序C实现4.2 归并排序C++实现4.3 归并排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/36...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3602369.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3602162.html</id>
    <title type="text">        堆排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3602162.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的堆排序。目录1.堆排序介绍2.堆排序图文说明3.堆排序的时间复杂度和稳定性4.堆排序实现4.1堆排序C实现4.2堆排序C++实现4.3堆排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3602162.html更多排序...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3602162.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3597641.html</id>
    <title type="text">        选择排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3597641.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的选择排序。目录1.选择排序介绍2.选择排序图文说明3.选择排序的时间复杂度和稳定性4.选择排序实现4.1选择排序C实现4.2选择排序C++实现4.3选择排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3597641....        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3597641.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3597597.html</id>
    <title type="text">        希尔排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3597597.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的希尔排序。内容包括：1.希尔排序介绍2.希尔排序图文说明3.希尔排序的时间复杂度和稳定性4.希尔排序实现4.1希尔排序C实现4.2希尔排序C++实现4.3希尔排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/35975...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3597597.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3596881.html</id>
    <title type="text">        直接插入排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3596881.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的直接插入排序。内容包括：1.直接插入排序介绍2.直接插入排序图文说明3.直接插入排序的时间复杂度和稳定性4.直接插入排序实现4.1 直接插入排序C实现4.2 直接插入排序C++实现4.3 直接插入排序Java实现转载请注明出处：http://www.cnblogs.com/s...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3596881.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3596746.html</id>
    <title type="text">        快速排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3596746.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的快速排序。目录1.快速排序介绍2.快速排序图文说明3.快速排序的时间复杂度和稳定性4.快速排序实现4.1快速排序C实现4.2快速排序C++实现4.3快速排序Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3596746....        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3596746.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3596232.html</id>
    <title type="text">        冒泡排序</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3596232.html"/>
    <content type="html">摘要：概要本章介绍排序算法中的冒泡排序，重点讲解冒泡排序的思想。目录1.冒泡排序介绍2.冒泡排序图文说明3.冒泡排序的时间复杂度和稳定性4.冒泡排序实现4.1冒泡排序C实现4.2冒泡排序C++实现4.3冒泡排序Java实现转载请注明出处：http://www.cnblogs.com/skywang1234...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3596232.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3659122.html</id>
    <title type="text">        斐波那契堆(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3659122.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了斐波那契堆，本章给出斐波那契堆的Java版本。还是那句老话，三种实现的原理一样，择其一了解即可。目录1.斐波那契堆的介绍2.斐波那契堆的基本操作3.斐波那契堆的Java实现(完整源码)4.斐波那契堆的Java测试程序转载请注明出处：更多内容：数据结构与算法系列 目录(...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3659122.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3659069.html</id>
    <title type="text">        斐波那契堆(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3659069.html"/>
    <content type="html">摘要：概要上一章介绍了斐波那契堆的基本概念，并通过C语言实现了斐波那契堆。本章是斐波那契堆的C++实现。目录1.斐波那契堆的介绍2.斐波那契堆的基本操作3.斐波那契堆的C++实现(完整源码)4.斐波那契堆的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3659069.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3659060.html</id>
    <title type="text">        斐波那契堆(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3659060.html"/>
    <content type="html">摘要：概要本章介绍斐波那契堆。和以往一样，本文会先对斐波那契堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录1.斐波那契堆的介绍2.斐波那契堆的基本操作3.斐...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3659060.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3656098.html</id>
    <title type="text">        二项堆(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3656098.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了二项堆，本章给出二项堆的Java版本。还是那句老话，三种实现的原理一样，择其一了解即可。目录1.二项树的介绍2.二项堆的介绍3.二项堆的基本操作4.二项堆的Java实现(完整源码)5.二项堆的Java测试程序转载请注明出处：http://www.cnblogs.com...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3656098.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3656005.html</id>
    <title type="text">        二项堆(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3656005.html"/>
    <content type="html">摘要：概要上一章介绍了二项堆的基本概念，并通过C语言实现了二项堆。本章是二项堆的C++实现。目录1.二项树的介绍2.二项堆的介绍3.二项堆的基本操作4.二项堆的C++实现(完整源码)5.二项堆的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/365...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3656005.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3655900.html</id>
    <title type="text">        二项堆(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3655900.html"/>
    <content type="html">摘要：概要本章介绍二项堆，它和之前所讲的堆(二叉堆、左倾堆、斜堆)一样，也是用于实现优先队列的。和以往一样，本文会先对二项堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理一样，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3655900.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638552.html</id>
    <title type="text">        斜堆(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638552.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了斜堆，本章给出斜堆的Java版本。还是那句老话，三种实现的原理一样，择其一了解即可。目录1.斜堆的介绍2.斜堆的基本操作3.斜堆的Java实现(完整源码)4.斜堆的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638552.html更多内容：数据结构与算法系列 目录斜堆的介绍斜堆(Skew heap)也叫自适应堆(self-adjusting heap)，它是左倾堆的一个变种。和左倾堆一样，它通常也用于实现优先队列；作为一种自适应的左倾堆，它的合并操作的时间复杂度也是O(lg n)。它与左倾堆的差别        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638552.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638524.html</id>
    <title type="text">        斜堆(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638524.html"/>
    <content type="html">摘要：概要上一章介绍了斜堆的基本概念，并通过C语言实现了斜堆。本章是斜堆的C++实现。目录1.斜堆的介绍2.斜堆的基本操作3.斜堆的C++实现(完整源码)4.斜堆的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638524.html更多内容：数据结构与算法系列 目录斜堆的介绍斜堆(Skew heap)也叫自适应堆(self-adjusting heap)，它是左倾堆的一个变种。和左倾堆一样，它通常也用于实现优先队列；作为一种自适应的左倾堆，它的合并操作的时间复杂度也是O(lg n)。它与左倾堆的差别是：(01) 斜堆的节点没有&amp;quot;        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638524.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638493.html</id>
    <title type="text">        斜堆(一)之 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638493.html"/>
    <content type="html">摘要：概要本章介绍斜堆。和以往一样，本文会先对斜堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录1.斜堆的介绍2.斜堆的基本操作3.斜堆的C实现(完整源码)4.斜堆的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638493.html更多内容：数据结构与算法系列 目录斜堆的介绍斜堆(Skew heap)也叫自适应堆(self-adjusting heap)，它是左倾堆的一个变种。和左倾堆一样，它通        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638493.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638384.html</id>
    <title type="text">        左倾堆(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638384.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了左倾堆，本章给出左倾堆的Java版本。还是那句老话，三种实现的原理一样，择其一了解即可。目录1.左倾堆的介绍2.左倾堆的图文解析3.左倾堆的Java实现(完整源码)4.左倾堆的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638384.html更多内容：数据结构与算法系列 目录(01)左倾堆(一)之 图文解析 和 C语言的实现(02)左倾堆(二)之 C++的实现(03)左倾堆(三)之 Java的实现左倾堆的介绍左倾堆(leftist tree 或 leftist heap)，又被成为左偏树、左偏堆，        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638384.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638342.html</id>
    <title type="text">        左倾堆(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638342.html"/>
    <content type="html">摘要：概要上一章介绍了左倾堆的基本概念，并通过C语言实现了左倾堆。本章是左倾堆的C++实现。目录1.左倾堆的介绍2.左倾堆的图文解析3.左倾堆的C++实现(完整源码)4.左倾堆的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638342.html更多内容：数据结构与算法系列 目录(01)左倾堆(一)之 图文解析 和 C语言的实现(02)左倾堆(二)之 C++的实现(03)左倾堆(三)之 Java的实现左倾堆的介绍左倾堆(leftist tree 或 leftist heap)，又被成为左偏树、左偏堆，最左堆等。它和二叉堆一样，都是优先队列        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638342.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3638327.html</id>
    <title type="text">        左倾堆(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3638327.html"/>
    <content type="html">摘要：概要本章介绍左倾堆，它和二叉堆一样，都是堆结构中的一员。和以往一样，本文会先对左倾堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录1.左倾堆的介绍2.左倾堆的图文解析3.左倾堆的C实现(完整源码)4.左倾堆的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3638327.html更多内容：数据结构与算法系列 目录(01)左倾堆(一)之 图文解析 和 C语言的实现(02)左倾堆(二)之 C++的实        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3638327.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3610390.html</id>
    <title type="text">        二叉堆(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3610390.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了二叉堆，本章给出二叉堆的Java版本。还是那句话，它们的原理一样，择其一了解即可。目录1. 二叉堆的介绍2. 二叉堆的图文解析3. 二叉堆的Java实现(完整源码)4. 二叉堆的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3610390.html更多内容：数据结构与算法系列 目录(01)二叉堆(一)之 图文解析 和 C语言的实现(02)二叉堆(二)之 C++的实现(03)二叉堆(三)之 Java的实二叉堆的介绍二叉堆是完全二元树或者是近似完全二元树，按照数据的排列方式可以分为两种：最大堆和最小堆。最        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3610390.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3610382.html</id>
    <title type="text">        二叉堆(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3610382.html"/>
    <content type="html">摘要：概要上一章介绍了堆和二叉堆的基本概念，并通过C语言实现了二叉堆。本章是二叉堆的C++实现。目录1. 二叉堆的介绍2. 二叉堆的图文解析3. 二叉堆的C++实现(完整源码)4. 二叉堆的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3610382.html更多内容：数据结构与算法系列 目录(01)二叉堆(一)之 图文解析 和 C语言的实现(02)二叉堆(二)之 C++的实现(03)二叉堆(三)之 Java的实二叉堆的介绍二叉堆是完全二元树或者是近似完全二元树，按照数据的排列方式可以分为两种：最大堆和最小堆。最大堆：父结点的键值总是大于或        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3610382.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3610187.html</id>
    <title type="text">        二叉堆(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3610187.html"/>
    <content type="html">摘要：概要本章介绍二叉堆，二叉堆就是通常我们所说的数据结构中&amp;quot;堆&amp;quot;中的一种。和以往一样，本文会先对二叉堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！ 目录1.堆和二叉堆的介绍2.二叉堆的图文解析3.二叉堆的C实现(完整源码)4.二叉堆的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3610187.html更多内容：数据结构与算法系列 目录(01)二叉堆(一)之 图文解析 和 C语言的        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3610187.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3644742.html</id>
    <title type="text">        红黑树(六)之 参考资料</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3644742.html"/>
    <content type="html">摘要：概要前面几章对红黑树进行了比较全面的介绍，包括红黑树的理论以及C/C++/Java的实现。这部分将我学习红黑树期间的一些参考资料和代码分享出来，供大家参考。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3644742.html更多内容：数据结构与算法系列 目录(01)红黑树(一)之 原理和算法详细介绍(02)红黑树(二)之 C语言的实现(03)红黑树(三)之 Linux内核中红黑树的经典实现(04)红黑树(四)之 C++的实现(05)红黑树(五)之 Java的实现(06)红黑树(六)之 参考资料参考说明在写红黑树这几篇文章的过程中，参考了许多资料：        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3644742.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3624343.html</id>
    <title type="text">        红黑树(五)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3624343.html"/>
    <content type="html">摘要：概要前面分别介绍红黑树的理论知识、红黑树的C语言和C++的实现。本章介绍红黑树的Java实现，若读者对红黑树的理论知识不熟悉，建立先学习红黑树的理论知识，再来学习本章。还是那句老话，红黑树的C/C++/Java实现，原理一样，择其一了解即可。目录1. 红黑树的介绍2. 红黑树的Java实现(代码说明)3. 红黑树的Java实现(完整源码)4. 红黑树的Java测试程序转载请注明出处：更多内容：数据结构与算法系列 目录(01)红黑树(一)之 原理和算法详细介绍(02)红黑树(二)之 C语言的实现(03)红黑树(三)之 Linux内核中红黑树的经典实现(04)红黑树(四)之 C++的实现(05)红        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3624343.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3624291.html</id>
    <title type="text">        红黑树(四)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3624291.html"/>
    <content type="html">摘要：概要前面分别介绍红黑树的理论知识和红黑树的C语言实现。本章是红黑树的C++实现，若读者对红黑树的理论知识不熟悉，建立先学习红黑树的理论知识，再来学习本章。目录1. 红黑树的介绍2. 红黑树的C++实现(代码说明)3. 红黑树的C++实现(完整源码)4. 红黑树的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3624291.html更多内容：数据结构与算法系列 目录(01)红黑树(一)之 原理和算法详细介绍(02)红黑树(二)之 C语言的实现(03)红黑树(三)之 Linux内核中红黑树的经典实现(04)红黑树(四)之 C++的实现(0        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3624291.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3624202.html</id>
    <title type="text">        红黑树(三)之 Linux内核中红黑树的经典实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3624202.html"/>
    <content type="html">摘要：概要前面分别介绍了红黑树的理论知识 以及 通过C语言实现了红黑树。本章继续会红黑树进行介绍，下面将Linux 内核中的红黑树单独移植出来进行测试验证。若读者对红黑树的理论知识不熟悉，建立先学习红黑树的理论知识，再来学习本章。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3624202.html更多内容：数据结构与算法系列 目录(01)红黑树(一)之 原理和算法详细介绍(02)红黑树(二)之 C语言的实现(03)红黑树(三)之 Linux内核中红黑树的经典实现(04)红黑树(四)之 C++的实现(05)红黑树(五)之 Java的实现(06)红黑树(六        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3624202.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3624177.html</id>
    <title type="text">        红黑树(二)之 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3624177.html"/>
    <content type="html">摘要：概要红黑树在日常的使用中比较常用，例如Java的TreeMap和TreeSet，C++的STL，以及Linux内核中都有用到。之前写过一篇文章专门介绍红黑树的理论知识，本文将给出红黑数的C语言的实现代码，后序章节再分别给出C++和Java版本的实现。还是那句话，三种实现原理相同，择其一了解即可；若文章有错误或不足的地方，望不吝指出！目录1. 红黑树的介绍2. 红黑树的C实现(代码说明)3. 红黑树的C实现(完整源码)4. 红黑树的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3624177.html更多内容：数据结构与算法系列 目录(01        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3624177.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3604286.html</id>
    <title type="text">        伸展树(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3604286.html"/>
    <content type="html">摘要：概要前面分别通过C和C++实现了伸展树，本章给出伸展树的Java版本。基本算法和原理都与前两章一样。1.伸展树的介绍2.伸展树的Java实现(完整源码)3.伸展树的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3604286.html更多内容:数据结构与算法系列 目录(01)伸展树(一)之 图文解析 和 C语言的实现(02)伸展树(二)之 C++的实现(03)伸展树(三)之 Java的实现伸展树的介绍伸展树(Splay Tree)是特殊的二叉查找树。它的特殊是指，它除了本身是棵二叉查找树之外，它还具备一个特点: 当某个节点被访问时，        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3604286.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3604258.html</id>
    <title type="text">        伸展树(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3604258.html"/>
    <content type="html">摘要：概要上一章介绍了伸展树的基本概念，并通过C语言实现了伸展树。本章是伸展树的C++实现，后续再给出Java版本。还是那句老话，它们的原理都一样，择其一了解即可。目录1.伸展树的介绍2.伸展树的C++实现(完整源码)3.伸展树的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3604258.html更多内容:数据结构与算法系列 目录(01)伸展树(一)之 图文解析 和 C语言的实现(02)伸展树(二)之 C++的实现(03)伸展树(三)之 Java的实现伸展树的介绍伸展树(Splay Tree)是特殊的二叉查找树。它的特殊是指，它除了本身是        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3604258.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3604238.html</id>
    <title type="text">        伸展树(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3604238.html"/>
    <content type="html">摘要：概要本章介绍伸展树。它和&amp;quot;二叉查找树&amp;quot;和&amp;quot;AVL树&amp;quot;一样，都是特殊的二叉树。在了解了&amp;quot;二叉查找树&amp;quot;和&amp;quot;AVL树&amp;quot;之后，学习伸展树是一件相当容易的事情。和以往一样，本文会先对伸展树的理论知识进行简单介绍，然后给出C语言的实现。后序再分别给出C++和Java版本的实现；这3种实现方式的原理都一样，选择其中之一进行了解即可。若文章有错误或不足的地方，希望您能不吝指出！ 目录1.伸展树的介绍2.伸展树的C实现3.伸展树的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3604238.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3577479.html</id>
    <title type="text">        AVL树(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3577479.html"/>
    <content type="html">摘要：概要前面分别介绍了AVL树&amp;quot;C语言版本&amp;quot;和&amp;quot;C++版本&amp;quot;，本章介绍AVL树的Java实现版本，它的算法与C语言和C++版本一样。内容包括：1.AVL树的介绍2.AVL树的Java实现3.AVL树的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3577479.html更多内容:数据结构与算法系列 目录(01)AVL树(一)之 图文解析 和 C语言的实现(02)AVL树(二)之 C++的实现(03)AVL树(三)之 Java的实现AVL树的介绍AVL树是高度平衡的而二叉树。它的特点是：AVL树中任        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3577479.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3577360.html</id>
    <title type="text">        AVL树(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3577360.html"/>
    <content type="html">摘要：概要上一章通过C语言实现了AVL树，本章将介绍AVL树的C++版本，算法与C语言版本的一样。目录1.AVL树的介绍2.AVL树的C++实现3.AVL树的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3577360.html更多内容:数据结构与算法系列 目录(01)AVL树(一)之 图文解析 和 C语言的实现(02)AVL树(二)之 C++的实现(03)AVL树(三)之 Java的实现AVL树的介绍AVL树是高度平衡的而二叉树。它的特点是：AVL树中任何节点的两个子树的高度最大差别为1。上面的两张图片，左边的是AVL树，它的任何节点的两        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3577360.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3576969.html</id>
    <title type="text">        AVL树(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3576969.html"/>
    <content type="html">摘要：概要本章介绍AVL树。和前面介绍&amp;quot;二叉查找树&amp;quot;的流程一样，本章先对AVL树的理论知识进行简单介绍，然后给出C语言的实现。本篇实现的二叉查找树是C语言版的，后面章节再分别给出C++和Java版本的实现。建议：若您对&amp;quot;二叉查找树&amp;quot;不熟悉，建议先学完&amp;quot;二叉查找树&amp;quot;再来学习AVL树。目录1.AVL树的介绍2.AVL树的C实现3.AVL树的C实现(完整源码)4.AVL树的C测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3576969.html更多内容:数据结构与算法系列 目录(01)AVL树        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3576969.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3576452.html</id>
    <title type="text">        二叉查找树(三)之 Java的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3576452.html"/>
    <content type="html">摘要：概要在前面分别介绍了&amp;quot;二叉查找树的相关理论知识，然后给出了二叉查找树的C和C++实现版本&amp;quot;。这一章写一写二叉查找树的Java实现版本。目录1.二叉树查找树2.二叉查找树的Java实现3.二叉查找树的Java测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3576452.html更多内容:数据结构与算法系列 目录(01)二叉查找树(一)之 图文解析 和 C语言的实现(02)二叉查找树(二)之 C++的实现(03)二叉查找树(三)之 Java的实现二叉查找树简介二叉查找树(Binary Search Tree)，又被称为二叉搜        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3576452.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3576373.html</id>
    <title type="text">        二叉查找树(二)之 C++的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3576373.html"/>
    <content type="html">摘要：概要上一章介绍了&amp;quot;二叉查找树的相关理论知识，并通过C语言实现了二叉查找树&amp;quot;。这一章给出二叉查找树的C++版本。这里不再对树的相关概念进行介绍，若遇到不明白的概念，可以在上一章查找。目录1.二叉树查找树2.二叉查找树的C++实现3.二叉查找树的C++实现(完整源码)4.二叉查找树的C++测试程序转载请注明出处：http://www.cnblogs.com/skywang12345/p/3576373.html更多内容:数据结构与算法系列 目录(01)二叉查找树(一)之 图文解析 和 C语言的实现(02)二叉查找树(二)之 C++的实现(03)二叉查找树(三)之 Java的实现        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3576373.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3576328.html</id>
    <title type="text">        二叉查找树(一)之 图文解析 和 C语言的实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3576328.html"/>
    <content type="html">摘要：概要 本章先对二叉树的相关理论知识进行介绍，然后给出C语言的详细实现。关于二叉树的学习，需要说明的是：它并不难，不仅不难，而且它非常简单。初次接触树的时候，我也觉得它似乎很难；而之所产生这种感觉主要是由于二叉树有一大堆陌生的概念、性质等内容。而当我真正的实现了二叉树再回过头来看它的相关概念和性质的时候，觉得原来它是如此的简单！因此，建议在学习二叉树的时候：先对二叉树基本的概念、性质有个基本了解，遇到难懂的知识点，可以画图来帮助理解；在有个基本的概念之后，再亲自动手实现二叉查找树(这一点至关重要!)；最后再回过头来总结一下二叉树的理论知识时，你会发现——它的确很简单！在代码实践中，我以&amp;quot        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3576328.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3562279.html</id>
    <title type="text">        队列的图文解析 和 对应3种语言的实现(C/C++/Java)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3562279.html"/>
    <content type="html">摘要：概要本章和介绍&amp;quot;栈&amp;quot;时的流程一样，先对队列进行介绍，然后分别给出队列的C、C++和Java三种语言的实现。内容包括：1.队列的介绍2.队列的C实现3.队列的C++实现4.队列的Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3562279.html更多内容:数据结构与算法系列 目录队列的介绍队列（Queue），是一种线性存储结构。它有以下几个特点：(01) 队列中数据是按照&amp;quot;先进先出（FIFO, First-In-First-Out）&amp;quot;方式进出队列的。(02) 队列只允许在&amp;quot;队首&amp;quot        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3562279.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3562239.html</id>
    <title type="text">        栈的图文解析 和 对应3种语言的实现(C/C++/Java)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3562239.html"/>
    <content type="html">摘要：概要本章会先对栈的原理进行介绍，然后分别通过C/C++/Java三种语言来演示栈的实现示例。注意：本文所说的栈是数据结构中的栈，而不是内存模型中栈。内容包括：1.栈的介绍2.栈的C实现3.栈的C++实现4.栈的Java实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3562239.html更多内容:数据结构与算法系列 目录栈的介绍栈（stack），是一种线性存储结构，它有以下几个特点：(01) 栈中数据是按照&amp;quot;后进先出（LIFO, Last In First Out）&amp;quot;方式进出栈的。(02) 向栈中添加/删除数据时，只能从栈顶        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3562239.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3562146.html</id>
    <title type="text">        Linux内核中双向链表的经典实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3562146.html"/>
    <content type="html">摘要：概要前面一章&amp;quot;介绍双向链表并给出了C/C++/Java三种实现&amp;quot;，本章继续对双向链表进行探讨，介绍的内容是Linux内核中双向链表的经典实现和用法。其中，也会涉及到Linux内核中非常常用的两个经典宏定义offsetof和container_of。内容包括：1.Linux中的两个经典宏定义2.Linux中双向链表的经典实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3562146.html更多内容:数据结构与算法系列 目录Linux中的两个经典宏定义倘若你查看过Linux Kernel的源码，那么你对offsetof和cont        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3562146.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3561803.html</id>
    <title type="text">        数组、单链表和双链表介绍 以及 双向链表的C/C++/Java实现</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3561803.html"/>
    <content type="html">摘要：概要线性表是一种线性结构，它是具有相同类型的n(n≥0)个数据元素组成的有限序列。本章先介绍线性表的几个基本组成部分：数组、单向链表、双向链表；随后给出双向链表的C、C++和Java三种语言的实现。内容包括：数组单向链表双向链表 1. C实现双链表 2. C++实现双链表 3. Java实现双链表转载请注明出处：http://www.cnblogs.com/skywang12345/p/3561803.html更多内容数据结构与算法系列 目录数组数组有上界和下界，数组的元素在上下界内是连续的。存储10,20,30,40,50的数组的示意图如下：数组的特点是：数据是连续的；随机访问速...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3561803.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3603935.html</id>
    <title type="text">        数据结构与算法系列 目录</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3603935.html"/>
    <content type="html">摘要：最近抽空整理了&amp;quot;数据结构和算法&amp;quot;的相关文章。在整理过程中，对于每种数据结构和算法分别给出&amp;quot;C&amp;quot;、&amp;quot;C++&amp;quot;和&amp;quot;Java&amp;quot;这三种语言的实现；实现语言虽不同，但原理如出一辙。因此，读者在了解和学习的过程中，择其一即可！下面是整理数据数据和算法的目录表，对于每一种按照C/C++/Java进行了划分，方便查...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3603935.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3526186.html</id>
    <title type="text">        设计模式01之 简单工厂模式(创建模式)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3526186.html"/>
    <content type="html">摘要：概要本章介绍&amp;quot;简单工厂模式&amp;quot;。内容包括：简单工厂模式简介简单工厂模式代码模型简单工厂模式示例说明：(01) 本文是在《Java与模式》的学习总结文章！ (02) 文章中的UML的相关内容(包括类图说明和绘图工具等)，可以参考&amp;quot;UML系列&amp;quot; 文章。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3526186.html简单工厂模式简介简单工厂模式(Simple Factory)，又被称为&amp;quot;静态工厂方法模式&amp;quot;。它属于&amp;quot;创建模式&amp;quot;(创建对象的模式)，并且是&amp;quot;工厂方法&amp;        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3526186.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3520840.html</id>
    <title type="text">        UML系列05之 基本流程图</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3520840.html"/>
    <content type="html">摘要：概要软件的基本流程图是我们在学习编程时的必修课，它很简单，却很实用。需要说明的是，UML并不包括软件的基本流程图，但是为了方便我自己查阅，所以将基本软件流程图归纳到UML系列当中。读者切不要认为基本流程图是属于UML的。本章对介绍的内容包括：流程图介绍流程图示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3520840.html流程图介绍流程图（FlowChart）是描述我们进行某一项活动所遵循顺序的一种图示方法。它能通过图形符号形象的表示解决问题的步骤和程序。好的流程图，不仅能对我们的程序设计起到作用；在帮助理解时，往往能起到&amp;quot;一张图        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3520840.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3523355.html</id>
    <title type="text">        UML系列04之  UML时序图</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3523355.html"/>
    <content type="html">摘要：概要本章对UML的时序图进行介绍，主要内容包括：时序图介绍时序图组成转载请注明出处：http://www.cnblogs.com/skywang12345/p/3523355.html时序图介绍时序图(Sequence Diagram)，亦称为序列图或循序图，是一种UML行为图。时序图是用来描述系统内部是如何交互运作的，它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。时序图组成时序图包含4类元素: 对象, 生命线, 消息, 激活。在介绍这4类元素之前，先看一则简单的示例：系统(init.c)启动之后，会开启显示器(lcd.c)。这个流程的时序图如下：1. 对象(Object)对        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3523355.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3523209.html</id>
    <title type="text">        UML系列03之 UML类图(二)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3523209.html"/>
    <content type="html">摘要：概要在&amp;quot;UML系列02之 UML类图(一)&amp;quot;中介绍了类图的基本构成--类的UML表示方法。本文是接着前文，继续对&amp;quot;UML的类图&amp;quot;中几种关系进行介绍。介绍的主要内容包括：UML类图的几种关系1. 泛化2. 实现3. 关联 3.1 自关联 3.2 单向关联 3.3 双向关联 3.4 多重性关联 3.5 聚合 3.6 组合4. 依赖转载请注明出处：http://www.cnblogs.com/skywang12345/p/3523209.htmlUML类图的几种关系在UML类图中，关系可以分为4种: 泛化, 实现, 关联 和 依赖。1. 泛化 -- 表示&amp;qu        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3523209.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3523185.html</id>
    <title type="text">        UML系列02之  UML类图(一)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3523185.html"/>
    <content type="html">摘要：概要本章介绍类图中类的UML表示方法。内容包括：类图介绍实体类的UML表示抽象类和接口的UML表示 转载请注明出处：http://www.cnblogs.com/skywang12345/p/3523185.html类图介绍类图，是UML(统一建模语言)中用于描述&amp;quot;类&amp;quot;以及&amp;quot;类与类&amp;quot;之间的示意图。它形象的描述出了系统的结构，帮助人们理解系统。类图是在&amp;quot;所有的UML图&amp;quot;中，实用频率非常之高；掌握它对于我们软件设计，以及交流都很有帮助。对于类图而言，它的基本单位是类。类主要由三部分组成：类名、属性、操作(函数)。UML类的表示大致如下：下        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3523185.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3523167.html</id>
    <title type="text">        UML系列01之  UML和绘图工具Visio介绍</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3523167.html"/>
    <content type="html">摘要：概要UML，全称是Unified Modeling Language，中文是&amp;quot;统一建模语言&amp;quot;。通俗点说，UML是一种创建模型的语言。UML是在开发阶段，说明，可视化，构建和书写一个面向对象软件密集系统的制品的开放方法。它使开发人员专注于建立产品的模型和结构，而不是选用什么程序语言和算法实现。当模型建立之后，模型可以被UML工具转化成指定的程序语言代码。本章介绍通过UML绘图工具: visio。visio是Windows系统下创建图表的工具。visio 的下载地址: http://pan.baidu.com/s/1i39N8fb转载请注明出处:http://www.cnblo        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3523167.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3544353.html</id>
    <title type="text">        Java异常(三) 《Java Puzzles》中关于异常的几个谜题</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3544353.html"/>
    <content type="html">摘要：概要本章介绍《Java Puzzles》中关于异常的几个谜题。这一章都是以代码为例，相比上一章看起来更有意思。内容包括：谜题1: 优柔寡断谜题2: 极端不可思议谜题3: 不受欢迎的宾客谜题4: 您好,再见!谜题5: 不情愿的构造器谜题6: 域和流谜题7: 异常为循环而抛转载请注明出处：http://www.cnblogs.com/skywang12345/p/3544353.html谜题1: 优柔寡断看看下面的程序，它到底打印什么？public class Indecisive { public static void main(String[] args) { Syste...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3544353.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3544287.html</id>
    <title type="text">        Java异常(二) 《Effective Java》中关于异常处理的几条建议</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3544287.html"/>
    <content type="html">摘要：概要本章是从《Effective Java》摘录整理出来的关于异常处理的几条建议。内容包括：第1条: 只针对不正常的情况才使用异常第2条: 对于可恢复的条件使用被检查的异常，对于程序错误使用运行时异常第3条: 避免不必要的使用被检查的异常第4条: 尽量使用标准的异常第5条: 抛出的异常要适合于相应的抽象第6条: 每个方法抛出的异常都要有文档第7条: 在细节消息中包含失败 -- 捕获消息第8条: 努力使失败保持原子性第9条: 不要忽略异常它们对应原书中&amp;quot;第8章 异常&amp;quot;部分的第39-47条。转载请注明出处：http://www.cnblogs.com/skywang12345/        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3544287.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3544168.html</id>
    <title type="text">        Java异常(一) Java异常简介及其架构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3544168.html"/>
    <content type="html">摘要：概要本章对Java中的异常进行介绍。内容包括：Java异常简介Java异常框架转载请注明出处：http://www.cnblogs.com/skywang12345/p/3544168.htmlJava异常简介 Java异常是Java提供的一种识别及响应错误的一致性机制。 Java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。在有效使用异常的情况下，异常能清晰的回答what, where, why这3个问题：异常类型回答了“什么”被抛出，异常堆栈跟踪回答了“在哪“抛出，异常信息回答了“为什么“会抛出。Java异常机制用到的几个关键字：try、c..        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3544168.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3544116.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”06之 Callable和Future</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3544116.html"/>
    <content type="html">摘要：概要本章介绍线程池中的Callable和Future。Callable 和 Future 简介示例和源码分析(基于JDK1.7.0_40)转载请注明出处：http://www.cnblogs.com/skywang12345/p/3544116.htmlCallable 和 Future 简介 Callable 和 Future 是比较有趣的一对组合。当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。1. CallableCallable 是一个接口，它只包含一个call()方法。Callable是一个返回结果并且可能抛出异常的任务。为了.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3544116.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3544786.html</id>
    <title type="text">        Java 时间日期系列目录</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3544786.html"/>
    <content type="html">摘要：下面是Java的时间和日期相关文章目录：01.Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(1) Calendar02.Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(2) 自己封装的Calendar接口03.Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(3) Date04.Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3544786.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3512947.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”05之 线程池原理(四)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3512947.html"/>
    <content type="html">摘要：概要本章介绍线程池的拒绝策略。内容包括：拒绝策略介绍拒绝策略对比和示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3512947.html拒绝策略介绍线程池的拒绝策略，是指当任务添加到线程池中被拒绝，而采取的处理措施。当任务添加到线程池中之所以被拒绝，可能是由于：第一，线程池异常关闭。第二，任务数量超过线程池的最大限制。线程池共包括4种拒绝策略，它们分别是：AbortPolicy, CallerRunsPolicy, DiscardOldestPolicy和DiscardPolicy。AbortPolicy -- 当任务添加到线程...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3512947.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3509960.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”04之 线程池原理(三)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3509960.html"/>
    <content type="html">摘要：转载请注明出处：http://www.cnblogs.com/skywang12345/p/3509960.html本章介绍线程池的生命周期。在&amp;quot;Java多线程系列--“基础篇”01之 基本概念&amp;quot;中，我们介绍过，线程有5种状态：新建状态，就绪状态，运行状态，阻塞状态，死亡状态。线程池也有5种状态；然而，线程池不同于线程，线程池的5种状态是：Running, SHUTDOWN, STOP, TIDYING, TERMINATED。线程池状态定义代码如下：private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNN        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3509960.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3509954.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”03之 线程池原理(二)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3509954.html"/>
    <content type="html">摘要：概要在前面一章&amp;quot;Java多线程系列--“JUC线程池”02之 线程池原理(一)&amp;quot;中介绍了线程池的数据结构，本章会通过分析线程池的源码，对线程池进行说明。内容包括：线程池示例参考代码(基于JDK1.7.0_40)线程池源码分析 (一) 创建“线程池” (二) 添加任务到“线程池” (三) 关闭“线程池”转载请注明出处：http://www.cnblogs.com/skywang12345/p/3509954.html线程池示例在分析线程池之前，先看一个简单的线程池示例。 1 import java.util.concurrent.Executors; 2 import jav        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3509954.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3509941.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”02之 线程池原理(一)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3509941.html"/>
    <content type="html">摘要：概要在上一章&amp;quot;Java多线程系列--“JUC线程池”01之 线程池架构&amp;quot;中，我们了解了线程池的架构。线程池的实现类是ThreadPoolExecutor类。本章，我们通过分析ThreadPoolExecutor类，来了解线程池的原理。内容包括：ThreadPoolExecutor简介ThreadPoolExecutor数据结构线程池调度转载请注明出处：http://www.cnblogs.com/skywang12345/p/3509941.htmlThreadPoolExecutor简介ThreadPoolExecutor是线程池类。对于线程池，可以通俗的将它理解为&amp;qu        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3509941.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3509903.html</id>
    <title type="text">        Java多线程系列--“JUC线程池”01之 线程池架构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3509903.html"/>
    <content type="html">摘要：概要前面分别介绍了&amp;quot;Java多线程基础&amp;quot;、&amp;quot;JUC原子类&amp;quot;和&amp;quot;JUC锁&amp;quot;。本章介绍JUC的最后一部分的内容——线程池。内容包括：线程池架构图线程池示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3509903.html线程池架构图线程池的架构图如下：1. Executor它是&amp;quot;执行者&amp;quot;接口，它是来执行任务的。准确的说，Executor提供了execute()接口来执行已提交的 Runnable 任务的对象。Executor存在的目的是提供一种将&amp;quot;任务提交&amp;q        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3509903.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498995.html</id>
    <title type="text">        Java多线程系列--“JUC集合”10之 ConcurrentLinkedQueue</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498995.html"/>
    <content type="html">摘要：概要本章对Java.util.concurrent包中的ConcurrentHashMap类进行详细的介绍。内容包括：ConcurrentLinkedQueue介绍ConcurrentLinkedQueue原理和数据结构ConcurrentLinkedQueue函数列表ConcurrentLinkedQueue源码分析(JDK1.7.0_40版本)ConcurrentLinkedQueue示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498995.htmlConcurrentLinkedQueue介绍ConcurrentLinkedQueue        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498995.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3503480.html</id>
    <title type="text">        Java多线程系列--“JUC集合”09之 LinkedBlockingDeque</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3503480.html"/>
    <content type="html">摘要：概要本章介绍JUC包中的LinkedBlockingDeque。内容包括：LinkedBlockingDeque介绍LinkedBlockingDeque原理和数据结构LinkedBlockingDeque函数列表LinkedBlockingDeque源码分析(JDK1.7.0_40版本)LinkedBlockingDeque示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3503480.htmlLinkedBlockingDeque介绍LinkedBlockingDeque是双向链表实现的双向并发阻塞队列。该阻塞队列同时支持FIFO和FILO两        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3503480.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3503458.html</id>
    <title type="text">        Java多线程系列--“JUC集合”08之 LinkedBlockingQueue</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3503458.html"/>
    <content type="html">摘要：概要本章介绍JUC包中的LinkedBlockingQueue。内容包括：LinkedBlockingQueue介绍LinkedBlockingQueue原理和数据结构LinkedBlockingQueue函数列表LinkedBlockingQueue源码分析(JDK1.7.0_40版本)LinkedBlockingQueue示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3503458.htmlLinkedBlockingQueue介绍LinkedBlockingQueue是一个单向链表实现的阻塞队列。该队列按 FIFO（先进先出）排序元素，新        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3503458.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498652.html</id>
    <title type="text">        Java多线程系列--“JUC集合”07之 ArrayBlockingQueue</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498652.html"/>
    <content type="html">摘要：概要本章对Java.util.concurrent包中的ArrayBlockingQueue类进行详细的介绍。内容包括：ArrayBlockingQueue介绍ArrayBlockingQueue原理和数据结构ArrayBlockingQueue函数列表ArrayBlockingQueue源码分析(JDK1.7.0_40版本)ArrayBlockingQueue示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498652.htmlArrayBlockingQueue介绍ArrayBlockingQueue是数组实现的线程安全的有界的阻塞队列。线        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498652.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498634.html</id>
    <title type="text">        Java多线程系列--“JUC集合”06之 ConcurrentSkipListSet</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498634.html"/>
    <content type="html">摘要：概要本章对Java.util.concurrent包中的ConcurrentSkipListSet类进行详细的介绍。内容包括：ConcurrentSkipListSet介绍ConcurrentSkipListSet原理和数据结构ConcurrentSkipListSet函数列表ConcurrentSkipListSet源码(JDK1.7.0_40版本)ConcurrentSkipListSet示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498634.htmlConcurrentSkipListSet介绍ConcurrentSkipListS        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498634.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498556.html</id>
    <title type="text">        Java多线程系列--“JUC集合”05之 ConcurrentSkipListMap</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498556.html"/>
    <content type="html">摘要：概要本章对Java.util.concurrent包中的ConcurrentSkipListMap类进行详细的介绍。内容包括：ConcurrentSkipListMap介绍ConcurrentSkipListMap原理和数据结构ConcurrentSkipListMap函数列表ConcurrentSkipListMap源码分析(JDK1.7.0_40版本)ConcurrentSkipListMap示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498556.htmlConcurrentSkipListMap介绍ConcurrentSkipLis        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498556.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498537.html</id>
    <title type="text">        Java多线程系列--“JUC集合”04之 ConcurrentHashMap</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498537.html"/>
    <content type="html">摘要：概要本章是JUC系列的ConcurrentHashMap篇。内容包括：ConcurrentHashMap介绍ConcurrentHashMap原理和数据结构ConcurrentHashMap函数列表ConcurrentHashMap源码分析(JDK1.7.0_40版本)ConcurrentHashMap示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498537.htmlConcurrentHashMap介绍ConcurrentHashMap是线程安全的哈希表。HashMap, Hashtable, ConcurrentHashMap之间的关联        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498537.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498497.html</id>
    <title type="text">        Java多线程系列--“JUC集合”03之 CopyOnWriteArraySet</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498497.html"/>
    <content type="html">摘要：概要本章是JUC系列中的CopyOnWriteArraySet篇。接下来，会先对CopyOnWriteArraySet进行基本介绍，然后再说明它的原理，接着通过代码去分析，最后通过示例更进一步的了解CopyOnWriteArraySet。内容包括：CopyOnWriteArraySet介绍CopyOnWriteArraySet原理和数据结构CopyOnWriteArraySet函数列表CopyOnWriteArraySet源码(JDK1.7.0_40版本)CopyOnWriteArraySet示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/349        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498497.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498483.html</id>
    <title type="text">        Java多线程系列--“JUC集合”02之 CopyOnWriteArrayList</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498483.html"/>
    <content type="html">摘要：概要本章是&amp;quot;JUC系列&amp;quot;的CopyOnWriteArrayList篇。接下来，会先对CopyOnWriteArrayList进行基本介绍，然后再说明它的原理，接着通过代码去分析，最后通过示例更进一步的了解CopyOnWriteArrayList。内容包括：CopyOnWriteArrayList介绍CopyOnWriteArrayList原理和数据结构CopyOnWriteArrayList函数列表CopyOnWriteArrayList源码分析(JDK1.7.0_40版本)CopyOnWriteArrayList示例转载请注明出处：http://www.cnblogs.c        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498483.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3498454.html</id>
    <title type="text">        Java多线程系列--“JUC集合”01之 框架</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3498454.html"/>
    <content type="html">摘要：概要之前，在&amp;quot;Java 集合系列目录(Category)&amp;quot;中，讲解了Java集合包中的各个类。接下来，将展开对JUC包中的集合进行学习。在学习之前，先温习一下&amp;quot;Java集合包&amp;quot;。本章内容包括：Java集合包JUC中的集合类转载请注明出处：http://www.cnblogs.com/skywang12345/p/3498454.htmlJava集合包在“Java 集合系列01之 总体框架”中，介绍java集合的架构。主体内容包括Collection集合和Map类；而Collection集合又可以划分为List(队列)和Set(集合)。1. List的实现        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498454.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3534050.html</id>
    <title type="text">        Java多线程系列--“JUC锁”11之 Semaphore信号量的原理和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3534050.html"/>
    <content type="html">摘要：概要本章，我们对JUC包中的信号量Semaphore进行学习。内容包括：Semaphore简介Semaphore数据结构Semaphore源码分析(基于JDK1.7.0_40)Semaphore示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3534050.htmlSemaphore简介Semaphore是一个计数信号量，它的本质是一个&amp;quot;共享锁&amp;quot;。信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3534050.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3533995.html</id>
    <title type="text">        Java多线程系列--“JUC锁”10之 CyclicBarrier原理和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3533995.html"/>
    <content type="html">摘要：概要本章介绍JUC包中的CyclicBarrier锁。内容包括：CyclicBarrier简介CyclicBarrier数据结构CyclicBarrier源码分析(基于JDK1.7.0_40)CyclicBarrier示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3533995.htmlCyclicBarrier简介CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。注意比较C        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3533995.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3533887.html</id>
    <title type="text">        Java多线程系列--“JUC锁”09之 CountDownLatch原理和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3533887.html"/>
    <content type="html">摘要：概要前面对&amp;quot;独占锁&amp;quot;和&amp;quot;共享锁&amp;quot;有了个大致的了解；本章，我们对CountDownLatch进行学习。和ReadWriteLock.ReadLock一样，CountDownLatch的本质也是一个&amp;quot;共享锁&amp;quot;。本章的内容包括：CountDownLatch简介CountDownLatch数据结构CountDownLatch源码分析(基于JDK1.7.0_40)CountDownLatch示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3533887.htmlCountDownLatch简介Co        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3533887.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3505809.html</id>
    <title type="text">        Java多线程系列--“JUC锁”08之 共享锁和ReentrantReadWriteLock</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3505809.html"/>
    <content type="html">摘要：概要Java的JUC(java.util.concurrent)包中的锁包括&amp;quot;独占锁&amp;quot;和&amp;quot;共享锁&amp;quot;。在“Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock ”中，对Java的独占锁进行了说明。本章对Java的“共享锁”进行介绍，JUC中的共享锁有CountDownLatch, CyclicBarrier, Semaphore, ReentrantReadWriteLock等；本章会以ReentrantReadWriteLock为蓝本对共享锁进行说明。内容包括：ReadWriteLock 和 ReentrantReadWriteLo        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3505809.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3505784.html</id>
    <title type="text">        Java多线程系列--“JUC锁”07之 LockSupport</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3505784.html"/>
    <content type="html">摘要：概述本章介绍JUC(java.util.concurrent)包中的LockSupport。内容包括：LockSupport介绍LockSupport函数列表LockSupport参考代码(基于JDK1.7.0_40)LockSupport示例 转载请注明出处：http://www.cnblogs.com/skywang12345/p/3505784.htmlLockSupport介绍LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。 LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程，而且park()和unpark()不会遇到“T        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3505784.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496716.html</id>
    <title type="text">        Java多线程系列--“JUC锁”06之 Condition条件</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496716.html"/>
    <content type="html">摘要：概要前面对JUC包中的锁的原理进行了介绍，本章会JUC中对与锁经常配合使用的Condition进行介绍，内容包括:Condition介绍Condition函数列表Condition示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3496716.htmlCondition介绍Condition的作用是对锁进行更精确的控制。Condition中的await()方法相当于Object的wait()方法，Condition中的signal()方法相当于Object的notify()方法，Condition中的signalAll()相当于Object的no        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496716.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496651.html</id>
    <title type="text">        Java多线程系列--“JUC锁”05之 非公平锁</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496651.html"/>
    <content type="html">摘要：概要前面两章分析了&amp;quot;公平锁的获取和释放机制&amp;quot;，这一章开始对“非公平锁”的获取锁/释放锁的过程进行分析。内容包括：参考代码获取非公平锁(基于JDK1.7.0_40)释放非公平锁(基于JDK1.7.0_40)关于锁的数据结构请参考&amp;quot;Java多线程系列--“JUC锁”03之 公平锁(一)&amp;quot;，锁的使用示例请参考“Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock”。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3496651.html参考代码下面给出Java1.7.0_40版本中，Reentr        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496651.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496609.html</id>
    <title type="text">        Java多线程系列--“JUC锁”04之 公平锁(二)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496609.html"/>
    <content type="html">摘要：概要前面一章，我们学习了“公平锁”获取锁的详细流程；这里，我们再来看看“公平锁”释放锁的过程。内容包括：参考代码释放公平锁(基于JDK1.7.0_40)“公平锁”的获取过程请参考“Java多线程系列--“JUC锁”03之 公平锁(一)”，锁的使用示例请参考“Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock”。注意：(01) 这里是以“公平锁”来进行说明。(02) 关于本章的术语，如“AQS”，“CAS函数”，“CLH队列”，“公平锁”，“非公平锁”，“独占锁”，“共享锁”等内容，请参考Java多线程系列--“JUC锁”03之 公平锁(一)的基本概念。转载请注明出处：h        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496609.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496147.html</id>
    <title type="text">        Java多线程系列--“JUC锁”03之 公平锁(一)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496147.html"/>
    <content type="html">摘要：概要本章对“公平锁”的获取锁机制进行介绍(本文的公平锁指的是互斥锁的公平锁)，内容包括：基本概念ReentrantLock数据结构参考代码获取公平锁(基于JDK1.7.0_40) 一. tryAcquire() 二. addWaiter() 三. acquireQueued() 四. selfInterrupt()“公平锁”的释放锁的机制在后面一章再做介绍，锁的使用示例请参考“Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock”。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3496147.html基本概念本章，我们会讲解“        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496147.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496101.html</id>
    <title type="text">        Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496101.html"/>
    <content type="html">摘要：本章对ReentrantLock包进行基本介绍，这一章主要对ReentrantLock进行概括性的介绍，内容包括：ReentrantLock介绍ReentrantLock函数列表ReentrantLock示例在后面的两章，会分别介绍ReentrantLock的两个子类(公平锁和非公平锁)的实现原理。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3496101.htmlReentrantLock介绍ReentrantLock是一个可重入的互斥锁，又被称为“独占锁”。顾名思义，ReentrantLock锁在同一个时间点只能被一个线程锁持有；而可重入的意        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496101.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3496098.html</id>
    <title type="text">        Java多线程系列--“JUC锁”01之 框架</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3496098.html"/>
    <content type="html">摘要：本章，我们介绍锁的架构；后面的章节将会对它们逐个进行分析介绍。目录如下：01.Java多线程系列--“JUC锁”01之 框架02.Java多线程系列--“JUC锁”02之 互斥锁ReentrantLock03.Java多线程系列--“JUC锁”03之 公平锁(一)04.Java多线程系列--“JUC锁”04之 公平锁(二)05.Java多线程系列--“JUC锁”05之 非公平锁06.Java多线程系列--“JUC锁”06之 Condition条件07.Java多线程系列--“JUC锁”07之 LockSupport08.Java多线程系列--“JUC锁”08之 共享锁和ReentrantRea        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3496098.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3514635.html</id>
    <title type="text">        Java多线程系列--“JUC原子类”05之 AtomicLongFieldUpdater原子类</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3514635.html"/>
    <content type="html">摘要：概要AtomicIntegerFieldUpdater, AtomicLongFieldUpdater和AtomicReferenceFieldUpdater这3个修改类的成员的原子类型的原理和用法相似。本章以对基本类型的原子类进行介绍。内容包括：AtomicLongFieldUpdater介绍和函数列表AtomicLongFieldUpdater示例AtomicLongFieldUpdater源码分析(基于JDK1.7.0_40)转载请注明出处：http://www.cnblogs.com/skywang12345/p/3514623.htmlAtomicLongFieldUpdater介绍        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3514635.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3514623.html</id>
    <title type="text">        Java多线程系列--“JUC原子类”04之 AtomicReference原子类</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3514623.html"/>
    <content type="html">摘要：概要本章对AtomicReference引用类型的原子类进行介绍。内容包括：AtomicReference介绍和函数列表AtomicReference源码分析(基于JDK1.7.0_40)AtomicReference示例转载请注明出处：http://www.cnblogs.com/skywang1...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3514623.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3514604.html</id>
    <title type="text">        Java多线程系列--“JUC原子类”03之 AtomicLongArray原子类</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3514604.html"/>
    <content type="html">摘要：概要AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray这3个数组类型的原子类的原理和用法相似。本章以AtomicLongArray对数组类型的原子类进行介绍。内容包括：AtomicLongArray介绍和函数列表AtomicLongArray源码分析(基于JDK1.7.0_40)AtomicLongArray示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3514604.htmlAtomicLongArray介绍和函数列表在&amp;quot;Java多线程系列--“JUC原子类”02之 A        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3514604.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3514593.html</id>
    <title type="text">        Java多线程系列--“JUC原子类”02之 AtomicLong原子类</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3514593.html"/>
    <content type="html">摘要：概要AtomicInteger, AtomicLong和AtomicBoolean这3个基本类型的原子类的原理和用法相似。本章以AtomicLong对基本类型的原子类进行介绍。内容包括：AtomicLong介绍和函数列表AtomicLong源码分析(基于JDK1.7.0_40)AtomicLong示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3514593.htmlAtomicLong介绍和函数列表AtomicLong是作用是对长整形进行原子操作。在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3514593.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3514589.html</id>
    <title type="text">        Java多线程系列--“JUC原子类”01之 框架</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3514589.html"/>
    <content type="html">摘要：根据修改的数据类型，可以将JUC包中的原子操作类可以分为4类。1.基本类型: AtomicInteger, AtomicLong, AtomicBoolean ;2.数组类型: AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray ;3.引用类型: AtomicReference, AtomicStampedRerence, AtomicMarkableReference ;4.对象的属性修改类型: AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceF        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3514589.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3447546.html</id>
    <title type="text">        《深入理解Java内存模型》读书总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3447546.html"/>
    <content type="html">摘要：概要文章是《深入理解Java内容模型》读书笔记，该书总共包括了3部分的知识。第1部分，基本概念 包括“并发、同步、主内存、本地内存、重排序、内存屏障、happens before规则、as-if-serial规则、数据依赖性、顺序一致性模型、JMM的含义和意义”。第2部分，同步机制 该部分中就介绍了“同步”的3种方式：volatile、锁、final。对于每一种方式，从该方式的“特性”、“建立的happens before关系”、“对应的内存语义”、“实现方式”等几个方面进行了分析说明。实际上，JMM保证“如果程序正确同步，则执行结果与顺序一致性内存模型的结果相...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3447546.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3480016.html</id>
    <title type="text">        Java多线程系列--“基础篇”11之 生产消费者问题</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3480016.html"/>
    <content type="html">摘要：概要本章，会对“生产/消费者问题”进行讨论。涉及到的内容包括：1. 生产/消费者模型2. 生产/消费者实现转载请注明出处：http://www.cnblogs.com/skywang12345/p/3480016.html1. 生产/消费者模型生产/消费者问题是个非常典型的多线程问题，涉及到的对象包括“生产者”、“消费者”、“仓库”和“产品”。他们之间的关系如下：(01) 生产者仅仅在仓储未满时候生产，仓满则停止生产。(02) 消费者仅仅在仓储有产品时候才能消费，仓空则等待。(03) 当消费者发现仓储没产品可消费时候会通知生产者生产。(04) 生产者在生产出可消费产品时候，应该通知等待的消费者        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3480016.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479982.html</id>
    <title type="text">        Java多线程系列--“基础篇”10之 线程优先级和守护线程</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479982.html"/>
    <content type="html">摘要：概要本章，会对守护线程和线程优先级进行介绍。涉及到的内容包括：1. 线程优先级的介绍2. 线程优先级的示例3. 守护线程的示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479982.html1. 线程优先级的介绍java 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。java 中有两种线程：用户线程和守护线程。可以通过isDaemon()方法来区别它们：如果返回false，则说明该线程是“用户线程”；否则就是“守护线程”。用户线程一般用户执行用户级任务，而守护线程也就是“后台线程”，一般用来执        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479982.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479949.html</id>
    <title type="text">        Java多线程系列--“基础篇”09之 interrupt()和线程终止方式</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479949.html"/>
    <content type="html">摘要：概要本章，会对线程的interrupt()中断和终止方式进行介绍。涉及到的内容包括：1. interrupt()说明2. 终止线程的方式 2.1 终止处于“阻塞状态”的线程 2.2 终止处于“运行状态”的线程3. 终止线程的示例4. interrupted() 和 isInterrupted()的区别转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479949.html1. interrupt()说明在介绍终止线程的方式之前，有必要先对interrupt()进行了解。关于interrupt()，java的djk文档描述如下：http://docs.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479949.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479275.html</id>
    <title type="text">        Java多线程系列--“基础篇”08之 join()</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479275.html"/>
    <content type="html">摘要：概要本章，会对Thread中join()方法进行介绍。涉及到的内容包括：1. join()介绍2. join()源码分析(基于JDK1.7.0_40)3. join()示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479275.html1. join()介绍join() 定义在Thread.java中。join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行。这句话可能有点晦涩，我们还是通过例子去理解：// 主线程public class Father extends Thread { public void run() {...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479275.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479256.html</id>
    <title type="text">        Java多线程系列--“基础篇”07之 线程休眠</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479256.html"/>
    <content type="html">摘要：概要本章，会对Thread中sleep()方法进行介绍。涉及到的内容包括：1. sleep()介绍2. sleep()示例3. sleep() 与 wait()的比较转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479256.html1. sleep()介绍sleep() 定义在Thread.java中。sleep() 的作用是让当前线程休眠，即当前线程会从“运行状态”进入到“休眠(阻塞)状态”。sleep()会指定休眠时间，线程休眠的时间会大于/等于该休眠时间；在线程重新被唤醒时，它会由“阻塞状态”变成“就绪状态”，从而等待cpu的调度执行。2        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479256.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479243.html</id>
    <title type="text">        Java多线程系列--“基础篇”06之 线程让步</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479243.html"/>
    <content type="html">摘要：概要本章，会对Thread中的线程让步方法yield()进行介绍。涉及到的内容包括：1. yield()介绍2. yield()示例3. yield() 与 wait()的比较转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479243.html1. yield()介绍yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！2. yield()        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479243.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479224.html</id>
    <title type="text">        Java多线程系列--“基础篇”05之 线程等待与唤醒</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479224.html"/>
    <content type="html">摘要：概要本章，会对线程等待/唤醒方法进行介绍。涉及到的内容包括：1. wait(), notify(), notifyAll()等方法介绍2. wait()和notify()3. wait(long timeout)和notify()4. wait() 和 notifyAll()5. 为什么notify(), wait()等函数定义在Object中，而不是Thread中转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479224.htmlwait(), notify(), notifyAll()等方法介绍在Object.java中，定义了wait(),        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479224.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479202.html</id>
    <title type="text">        Java多线程系列--“基础篇”04之 synchronized关键字</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479202.html"/>
    <content type="html">摘要：概要本章，会对synchronized关键字进行介绍。涉及到的内容包括：1. synchronized原理2. synchronized基本规则3. synchronized方法 和 synchronized代码块4. 实例锁 和 全局锁转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479202.html1. synchronized原理在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。例如，synchronized(obj)就获取了“obj        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479202.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479083.html</id>
    <title type="text">        Java多线程系列--“基础篇”03之  Thread中start()和run()的区别</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479083.html"/>
    <content type="html">摘要：概要Thread类包含start()和run()方法，它们的区别是什么？本章将对此作出解答。本章内容包括：start() 和 run()的区别说明start() 和 run()的区别示例start() 和 run()相关源码(基于JDK1.7.0_40)转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479083.htmlstart() 和 run()的区别说明start() : 它的作用是启动一个新线程，新线程会执行相应的run()方法。start()不能被重复调用。run() : run()就和普通的成员方法一样，可以被重复调用。单独调用ru.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479083.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479063.html</id>
    <title type="text">        Java多线程系列--“基础篇”02之 常用的实现多线程的两种方式</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479063.html"/>
    <content type="html">摘要：概要本章，我们学习“常用的实现多线程的2种方式”：Thread 和 Runnable。之所以说是常用的，是因为通过还可以通过java.util.concurrent包中的线程池来实现多线程。关于线程池的内容，我们以后会详细介绍；现在，先对的Thread和Runnable进行了解。本章内容包括：Thread和Runnable的简介Thread和Runnable的异同点Thread和Runnable的多线程的示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3479063.htmlThread和Runnable简介Runnable 是一个接口，该接口中        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479063.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3479024.html</id>
    <title type="text">        Java多线程系列--“基础篇”01之 基本概念</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3479024.html"/>
    <content type="html">摘要：多线程是Java中不可避免的一个重要主体。从本章开始，我们将展开对多线程的学习。接下来的内容，是对“JDK中新增JUC包”之前的Java多线程内容的讲解，涉及到的内容包括，Object类中的wait(), notify()等接口；Thread类中的接口；synchronized关键字。注：JUC包是指，Java.util.concurrent包，它是由Java大师Doug Lea完成并在JDK1.5版本添加到Java中的。在进入后面章节的学习之前，先对了解一些多线程的相关概念。线程状态图说明：线程共包括以下5种状态。1. 新建状态(New) : 线程对象被创建后，就进入了新建状态。例如，...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3479024.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3474206.html</id>
    <title type="text">        Android之 MTP框架和流程分析</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3474206.html"/>
    <content type="html">摘要：概要本文的目的是介绍Android系统中MTP的一些相关知识。主要的内容包括：第1部分 MTP简介 对Mtp协议进行简单的介绍。第2部分 MTP框架 介绍Android系统下MTP的框架。第3部分 MTP启动流程 详细分析MTP服务的启动流程，包括Java层, JNI层, kernel相关知识的介绍。第4部分 MTP协议之I-&amp;gt;R流程 以&amp;quot;PC中打开一个MTP上的文件(读取文件内容)&amp;quot;为例，来对&amp;quot;MTP协议中Initiator到Reponser的流程&amp;quot;进行说明。第5部分 MTP协议之R-&amp;gt;I流程 以&amp;quot;Android设备中将一个文件拷        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3474206.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3470728.html</id>
    <title type="text">        FreeCommander 学习手册</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3470728.html"/>
    <content type="html">摘要：概述转载请注明出处：http://www.cnblogs.com/skywang12345/p/3470728.htmlFreeCommander(下文简称FC)，是Windows下面比较强大的文件管理工具。本文就是笔者分享自己使用FC的一些心得，希望对您能有所帮助。文章主要包括3个方面的内容：FC安装和基本设置、FC中的快捷键、FC插件。第1部分 安装和基本设置1 FC下载/安装(01) 可以到FreeCommander的官网上下载FreeCommander。 下载网址：http://www.freecommander.com/(02) 安装后桌面会创建FreeCommander快捷图标..        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3470728.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/string01.html</id>
    <title type="text">        String详解, String和CharSequence区别, StringBuilder和StringBuffer的区别 (String系列之1)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/string01.html"/>
    <content type="html">摘要：本章主要介绍String和CharSequence的区别，以及它们的API详细使用方法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/string01.html更多内容请参考：1.StringBuilder 详解 (String系列之2)2.StringBuffer 详解 (String系列之3)String 简介String 是java中的字符串，它继承于CharSequence。String类所包含的API接口非常多。为了便于今后的使用，我对String的API进行了分类，并都给出的演示程序。String 和 CharSequence 关系St        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/string01.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/string03.html</id>
    <title type="text">        StringBuffer 详解 (String系列之3)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/string03.html"/>
    <content type="html">摘要：本章介绍StringBuffer以及它的API的详细使用方法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/string03.htmlStringBuffer 简介StringBuffer 是一个线程安全的可变的字符序列。它继承于AbstractStringBuilder，实现了CharSequence接口。StringBuilder 也是继承于AbstractStringBuilder的子类；但是，StringBuilder和StringBuffer不同，前者是非线程安全的，后者是线程安全的。StringBuffer 和 CharSequence        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/string03.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/string02.html</id>
    <title type="text">        StringBuilder 详解 (String系列之2)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/string02.html"/>
    <content type="html">摘要：本章介绍StringBuilder以及它的API的详细使用方法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/string02.htmlStringBuilder 简介StringBuilder 是一个可变的字符序列。它继承于AbstractStringBuilder，实现了CharSequence接口。StringBuffer 也是继承于AbstractStringBuilder的子类；但是，StringBuilder和StringBuffer不同，前者是非线程安全的，后者是线程安全的。StringBuilder 和 CharSequence之间        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/string02.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_26.html</id>
    <title type="text">        java io系列26之 RandomAccessFile</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_26.html"/>
    <content type="html">摘要：本文主要介绍 RandomAccessFile。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_26.html更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;RandomAccessFileRandomAccessFile 是随机访问文件(包括读/写)的类。它支持对文件随机访问的读取和写入，即我们可以从指定的位置读取/写入文件数据。需要注意的是，RandomAccessFile 虽然属于java.io包，但它不是InputStream或者OutputStream的子类；它也不同于FileInputStream和FileOu        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_26.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_25.html</id>
    <title type="text">        java io系列25之 PrintWriter (字符打印输出流)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_25.html"/>
    <content type="html">摘要：更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;PrintWriter 介绍PrintWriter 是字符类型的打印输出流，它继承于Writer。PrintStream 用于向文本输出流打印对象的格式化表示形式。它实现在 PrintStream 中的所有 print 方法。它不包含用于写入原始字节的方法，对于这些字节，程序应该使用未编码的字节流进行写入。PrintWriter 函数列表PrintWriter(OutputStream out)PrintWriter(OutputStream out, boolean autoFlush)PrintWriter(Writer        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_25.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_24.html</id>
    <title type="text">        java io系列24之 BufferedWriter(字符缓冲输出流)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_24.html"/>
    <content type="html">摘要：转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_24.html更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;BufferedWriter 介绍BufferedWriter 是缓冲字符输出流。它继承于Writer。BufferedWriter 的作用是为其他字符输出流添加一些缓冲功能。BufferedWriter 函数列表// 构造函数BufferedWriter(Writer out) BufferedWriter(Writer out, int sz) void close() ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_24.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_23.html</id>
    <title type="text">        java io系列23之 BufferedReader(字符缓冲输入流)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_23.html"/>
    <content type="html">摘要：转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_23.html更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;BufferedReader 介绍BufferedReader 是缓冲字符输入流。它继承于Reader。BufferedReader 的作用是为其他字符输入流添加一些缓冲功能。BufferedReader 函数列表BufferedReader(Reader in)BufferedReader(Reader in, int size)void close()void mark(int markLimit)boolea        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_23.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_22.html</id>
    <title type="text">        java io系列22之 FileReader和FileWriter</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_22.html"/>
    <content type="html">摘要：FileReader 是用于读取字符流的类，它继承于InputStreamReader。要读取原始字节流，请考虑使用 FileInputStream。FileWriter 是用于写入字符流的类，它继承于OutputStreamWriter。要写入原始字节流，请考虑使用 FileOutputStream。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_22.html更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;FileReader和FileWriter源码分析1. FileReader 源码(基于jdk1.7.40) 1         &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_22.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_21.html</id>
    <title type="text">        java io系列21之 InputStreamReader和OutputStreamWriter</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_21.html"/>
    <content type="html">摘要：InputStreamReader和OutputStreamWriter 是字节流通向字符流的桥梁：它使用指定的 charset 读写字节并将其解码为字符。InputStreamReader 的作用是将“字节输入流”转换成“字符输入流”。它继承于Reader。OutputStreamWriter 的作用是将“字节输出流”转换成“字符输出流”。它继承于Writer。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_21.html更多内容请参考：java io系列01之 &amp;quot;目录&amp;quot;InputStreamReader和OutputSt        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_21.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_20.html</id>
    <title type="text">        java io系列20之 PipedReader和PipedWriter</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_20.html"/>
    <content type="html">摘要：本章，我们学习PipedReader和PipedWriter。它们和“PipedInputStream和PipedOutputStream”一样，都可以用于管道通信。PipedWriter 是字符管道输出流，它继承于Writer。PipedReader 是字符管道输入流，它继承于Writer。PipedWriter和PipedReader的作用是可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedWriter和PipedReader配套使用。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_20.html更多内容请参考：java io        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_20.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_19.html</id>
    <title type="text">        java io系列19之 CharArrayWriter(字符数组输出流)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_19.html"/>
    <content type="html">摘要：本章，我们学习CharArrayWriter。学习时，我们先对CharArrayWriter有个大致了解，然后深入了解一下它的源码，最后通过示例来掌握它的用法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_19.html更多内容请参考：Java io系列 &amp;quot;目录&amp;quot;CharArrayWriter 介绍CharArrayReader 用于写入数据符，它继承于Writer。操作的数据是以字符为单位！CharArrayWriter 函数列表CharArrayWriter()CharArrayWriter(int initialSi        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_19.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3405100.html</id>
    <title type="text">        Android之 系统启动流程</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3405100.html"/>
    <content type="html">摘要：在前一篇文章&amp;quot;Android之 看“马达”如何贯通Android系统 (从硬件设计 --&amp;gt; 驱动 --&amp;gt; HAL --&amp;gt; JNI --&amp;gt; Framework --&amp;gt; Application)&amp;quot;中，我们谈到“马达等系统服务都是通过SystemServer启动/管理的”。本章，我们就Android的系统启动流程进行分析；也说说SystemServer到底是如何工作的。转载请注明出处：http://www.cnblogs.com/skywang12345/p/3405100.html在详细说明之后，我们先建立个整体思路：Kernel中启动的第一个用户        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3405100.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3404808.html</id>
    <title type="text">        Android之 看“马达”如何贯通Android系统 (从硬件设计 --&amp;gt; 驱动 --&amp;gt; HAL --&amp;gt; JNI --&amp;gt; Framework --&amp;gt; Application)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3404808.html"/>
    <content type="html">摘要：在Android 2.3(Gingerbread) 系统的时候，我写过一篇关于“Android 震动马达系统“的文章，当时的Linux内核还是2.6版本的。写那篇文章的目的，是想彻底的了解从硬件到驱动，再到应用的运作流程。完成了之后，文章一直仍在草稿箱里面没发表；今天看到，决定整理一下，重新发表。目的是想和大家分享自己对Android系统的一点认识：以马达为代表，来考究“Android是如何一步步工作的。它从硬件设计，到Linux驱动，再到HAL，再到JNI，再到Framework，最后到被应用调用，这整套的流程到底是怎么样的！” 转载请注明出处：http://www.cnblogs.c...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3404808.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_18.html</id>
    <title type="text">        java io系列18之 CharArrayReader(字符数组输入流)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_18.html"/>
    <content type="html">摘要：从本章开始，我们开始对java io中的“字符流”进行学习。首先，要学习的是CharArrayReader。学习时，我们先对CharArrayReader有个大致了解，然后深入了解一下它的源码，最后通过示例来掌握它的用法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_18.htmlCharArrayReader 介绍CharArrayReader 是字符数组输入流。它和ByteArrayInputStream类似，只不过ByteArrayInputStream是字节数组输入流，而CharArray是字符数组输入流。CharArrayReade        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_18.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_17.html</id>
    <title type="text">        java io系列17之 System.out.println(&amp;quot;hello world&amp;quot;)原理</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_17.html"/>
    <content type="html">摘要：我们初学java的第一个程序是&amp;quot;hello world&amp;quot;1 public class HelloWorld {2 public static void main(String[] args) {3 System.out.println(&amp;quot;hello world&amp;quot;);4 }5 }上面程序到底是怎么在屏幕上输出“hello world”的呢？这就是本来要讲解的内容，即System.out.println(&amp;quot;hello world&amp;quot;)的原理。我们先看看System.out.println的流程。先看看System.java中out的定义，源        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_17.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_16.html</id>
    <title type="text">        java io系列16之 PrintStream(打印输出流)详解</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_16.html"/>
    <content type="html">摘要：本章介绍PrintStream以及 它与DataOutputStream的区别。我们先对PrintStream有个大致认识，然后再深入学习它的源码，最后通过示例加深对它的了解。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_16.htmlPrintStream 介绍PrintStream 是打印输出流，它继承于FilterOutputStream。PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。与其他输出流不同，PrintStream 永远不会抛出 IOException；它产生        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_16.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_15.html</id>
    <title type="text">        java io系列15之 DataOutputStream(数据输出流)的认知、源码和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_15.html"/>
    <content type="html">摘要：本章介绍DataOutputStream。我们先对DataOutputStream有个大致认识，然后再深入学习它的源码，最后通过示例加深对它的了解。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_15.htmlDataOutputStream 介绍DataOutputStream 是数据输出流。它继承于FilterOutputStream。DataOutputStream 是用来装饰其它输出流，将DataOutputStream和DataInputStream输入流配合使用，“允许应用程序以与机器无关方式从底层输入流中读写基本 Java 数据类        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_15.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_14.html</id>
    <title type="text">        java io系列14之 DataInputStream(数据输入流)的认知、源码和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_14.html"/>
    <content type="html">摘要：本章介绍DataInputStream。我们先对DataInputStream有个大致认识，然后再深入学习它的源码，最后通过示例加深对它的了解。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_14.htmlDataInputStream 介绍DataInputStream 是数据输入流。它继承于FilterInputStream。DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。应用程序可以使用DataOutputStream(数据输出流)写入由DataInput        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_14.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_13.html</id>
    <title type="text">        java io系列13之 BufferedOutputStream(缓冲输出流)的认知、源码和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_13.html"/>
    <content type="html">摘要：本章内容包括3个部分：BufferedOutputStream介绍，BufferedOutputStream源码，以及BufferedOutputStream使用示例。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_13.html BufferedOutputStream 介绍BufferedOutputStream 是缓冲输出流。它继承于FilterOutputStream。BufferedOutputStream 的作用是为另一个输出流提供“缓冲功能”。BufferedOutputStream 函数列表BufferedOutputStrea        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_13.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_12.html</id>
    <title type="text">        java io系列12之 BufferedInputStream(缓冲输入流)的认知、源码和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_12.html"/>
    <content type="html">摘要：本章内容包括3个部分：BufferedInputStream介绍，BufferedInputStream源码，以及BufferedInputStream使用示例。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_12.html BufferedInputStream 介绍BufferedInputStream 是缓冲输入流。它继承于FilterInputStream。BufferedInputStream 的作用是为另一个输入流添加一些功能，例如，提供“缓冲功能”以及支持“mark()标记”和“reset()重置方法”。BufferedInput        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_12.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_11.html</id>
    <title type="text">        java io系列11之 FilterOutputStream</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_11.html"/>
    <content type="html">摘要：FilterOutputStream 介绍FilterOutputStream 的作用是用来“封装其它的输出流，并为它们提供额外的功能”。它主要包括BufferedOutputStream, DataOutputStream和PrintStream。(01) BufferedOutputStream的作用就是为“输出流提供缓冲功能”。(02)DataOutputStream 是用来装饰其它输出流，将DataOutputStream和DataInputStream输入流配合使用，“允许应用程序以与机器无关方式从底层输入流中读写基本 Java 数据类型”。(03)PrintStream 是用来装饰        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_11.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_10.html</id>
    <title type="text">        java io系列10之 FilterInputStream</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_10.html"/>
    <content type="html">摘要：FilterInputStream 介绍FilterInputStream 的作用是用来“封装其它的输入流，并为它们提供额外的功能”。它的常用的子类有BufferedInputStream和DataInputStream。BufferedInputStream的作用就是为“输入流提供缓冲功能，以及mark()和reset()功能”。DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。应用程序可以使用DataOutputStream(数据输出流)写入由DataInputStream(数据输入流)读取的数据。Filte        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_10.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_09.html</id>
    <title type="text">        java io系列09之 FileDescriptor总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_09.html"/>
    <content type="html">摘要：本章对FileDescriptor进行介绍转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_09.htmlFileDescriptor 介绍FileDescriptor 是“文件描述符”。FileDescriptor 可以被用来表示开放文件、开放套接字等。以FileDescriptor表示文件来说：当FileDescriptor表示某文件时，我们可以通俗的将FileDescriptor看成是该文件。但是，我们不能直接通过FileDescriptor对该文件进行操作；若需要通过FileDescriptor对该文件进行操作，则需要新创建FileDes        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_09.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_08.html</id>
    <title type="text">        java io系列08之 File总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_08.html"/>
    <content type="html">摘要：本文对File的API和常用方法进行介绍。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_08.htmlFile 介绍File 是“文件”和“目录路径名”的抽象表示形式。File 直接继承于Object，实现了Serializable接口和Comparable接口。实现Serializable接口，意味着File对象支持序列化操作。而实现Comparable接口，意味着File对象之间可以比较大小；File能直接被存储在有序集合(如TreeSet、TreeMap中)。File 函数列表// 静态成员public static final Str        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_08.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_07.html</id>
    <title type="text">        java io系列07之 FileInputStream和FileOutputStream</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_07.html"/>
    <content type="html">摘要：本章介绍FileInputStream 和 FileOutputStream转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_07.htmlFileInputStream 和 FileOutputStream 介绍FileInputStream 是文件输入流，它继承于InputStream。通常，我们使用FileInputStream从某个文件中获得输入字节。FileOutputStream 是文件输出流，它继承于OutputStream。通常，我们使用FileOutputStream 将数据写入 File 或 FileDescriptor 的输        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_07.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_06.html</id>
    <title type="text">        java io系列06之 序列化总结(Serializable 和 Externalizable)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_06.html"/>
    <content type="html">摘要：本章，我们对序列化进行深入的学习和探讨。学习内容，包括序列化的作用、用途、用法，以及对实现序列化的2种方式Serializable和Externalizable的深入研究。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_06.html1. 序列化是的...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_06.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_05.html</id>
    <title type="text">        java io系列05之 ObjectInputStream 和 ObjectOutputStream</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_05.html"/>
    <content type="html">摘要：本章，我们学习ObjectInputStream 和 ObjectOutputStream ObjectInputStream 和 ObjectOutputStream 介绍ObjectInputStream 和 ObjectOutputStream 的作用是，对基本数据和对象进行序列化操作支持。创建“文件输出流”对应的ObjectOutputStream对象，该ObjectOutputStream对象能提供对“基本数据或对象”的持久存储；当我们需要读取这些存储的“基本数据或对象”时，可以创建“文件输入流”对应的ObjectInputStream，进而读取出这些“基本数据或对象”。注意： 只有        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_05.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_04.html</id>
    <title type="text">        java io系列04之 管道(PipedOutputStream和PipedInputStream)的简介,源码分析和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_04.html"/>
    <content type="html">摘要：本章，我们对java 管道进行学习。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_04.htmljava 管道介绍在java中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。使用管道通信时，大致的流程是：我们在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedIn        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_04.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_03.html</id>
    <title type="text">        java io系列03之 ByteArrayOutputStream的简介,源码分析和示例(包括OutputStream)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_03.html"/>
    <content type="html">摘要：前面学习ByteArrayInputStream，了解了“输入流”。接下来，我们学习与ByteArrayInputStream相对应的输出流，即ByteArrayOutputStream。本章，我们会先对ByteArrayOutputStream进行介绍，在了解了它的源码之后，再通过示例来掌握如何使用它。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_03.htmlByteArrayOutputStream 介绍ByteArrayOutputStream 是字节数组输出流。它继承于OutputStream。ByteArrayOutputStre        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_03.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_02.html</id>
    <title type="text">        java io系列02之 ByteArrayInputStream的简介,源码分析和示例(包括InputStream)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_02.html"/>
    <content type="html">摘要：我们以ByteArrayInputStream，拉开对字节类型的“输入流”的学习序幕。本章，我们会先对ByteArrayInputStream进行介绍，然后深入了解一下它的源码，最后通过示例来掌握它的用法。转载请注明出处：http://www.cnblogs.com/skywang12345/p/io_02.htmlByteArrayInputStream 介绍ByteArrayInputStream 是字节数组输入流。它继承于InputStream。它包含一个内部缓冲区，该缓冲区包含从流中读取的字节；通俗点说，它的内部缓冲区就是一个字节数组，而ByteArrayInputStream本质就是        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_02.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/io_01.html</id>
    <title type="text">        java io系列01之 &amp;quot;目录&amp;quot;</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/io_01.html"/>
    <content type="html">摘要：java io 系列目录如下：01.java io系列01之&amp;quot;目录&amp;quot;02.java io系列02之 ByteArrayInputStream的简介,源码分析和示例(包括InputStream)03.java io系列03之 ByteArrayOutputStream的简介,源码分析和示例(包括OutputStream)04.java io系列04之 管道(PipedOutputStream和PipedInputStream)的简介,源码分析和示例05.java io系列05之 ObjectInputStream 和 ObjectOutputStream06.java io系        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/io_01.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3360348.html</id>
    <title type="text">        字符编码(ASCII，Unicode和UTF-8) 和 大小端</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3360348.html"/>
    <content type="html">摘要：本文包括2部分内容：“ASCII，Unicode和UTF-8” 和“Big Endian和Little Endian”。第1部分 ASCII，Unicode和UTF-8 介绍1. ASCII码我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3360348.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3331327.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(7) TimeZone</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3331327.html"/>
    <content type="html">摘要：本章介绍TimeZone。TimeZone 简介TimeZone 表示时区偏移量，也可以计算夏令时。在操作 Date, Calendar等表示日期/时间的对象时，经常会用到TimeZone；因为不同的时区，时间不同。下面说说TimeZone对象的2种常用创建方式。1 获取默认的TimeZone对象使用方法：TimeZone tz = TimeZone.getDefault()2 使用 getTimeZone(String id) 方法获取TimeZone对象使用方法：// 获取 “GMT+08:00”对应的时区TimeZone china = TimeZone.getTimeZone(&amp;quo        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3331327.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3331311.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(6) Locale</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3331311.html"/>
    <content type="html">摘要：本章介绍Locale。1 Locale 介绍Locale 表示地区。每一个Locale对象都代表了一个特定的地理、政治和文化地区。在操作 Date, Calendar等表示日期/时间的对象时，经常会用到；因为不同的区域，时间表示方式都不同。下面说说Locale对象的3种常用创建方式。1 获取默认的Locale使用方法：Locale locale = Locale.getDefault()2 直接使用Locale的静态对象Locale.java中提供了以下静态对象public static final Locale CANADApublic static final Locale CANADA_        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3331311.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3330661.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(5) SimpleDateFormat</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3330661.html"/>
    <content type="html">摘要：本章介绍SimpleDateFormat。SimpleDateFormat 介绍SimpleDateFormat 是一个格式化Date 以及 解析日期字符串 的工具。它的最常用途是，能够按照指定的格式来对Date进行格式化，然后我们使用可以格式化Date后得到的字符串。更严格的说，SimpleDateFormat 是一个以与语言环境有关的方式来格式化和解析日期的具体类。它允许进行格式化（日期 -&amp;gt; 文本）、解析（文本 -&amp;gt; 日期）和规范化。SimpleDateFormat的构造函数：// 构造函数SimpleDateFormat()SimpleDateFormat(String p        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3330661.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3330654.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(4) DateFormat</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3330654.html"/>
    <content type="html">摘要：本章主要介绍DateFormat。DateFormat 介绍DateFormat 的作用是 格式化并解析“日期/时间”。实际上，它是Date的格式化工具，它能帮助我们格式化Date，进而将Date转换成我们想要的String字符串供我们使用不过DateFormat的格式化Date的功能有限，没有SimpleDateFormat强大；但DateFormat是SimpleDateFormat的父类。所以，我们先对DateFormat有个整体了解，然后再学习SimpleDateFormat。DateFormat 的作用是格式化Date。它支持格式化风格包括 FULL、LONG、MEDIUM 和 SH        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3330654.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3330647.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(3) Date</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3330647.html"/>
    <content type="html">摘要：本章主要介绍Date类，并通过示例学习如何使用它。最后，讲解一下UTC、GMT和时区的关系。Date 介绍Date 定义public class Date implements java.io.Serializable, Cloneable, Comparable {}Date 是表示时间的类。一个Date对象表示一个特定的瞬间，能精确到毫秒。我们可以通过这个特定的瞬间，来获取到Date对应的“年、月、日、时、分、秒”。反之亦然，我们也可以通过设置Date的“年、月、日、时、分、秒”等信息，来改变Date所指定的特定瞬间。除了“年月日时分秒”等信息之外，Data也允许格式化和解析日期字符串。即        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3330647.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3329653.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(2) 自己封装的Calendar接口</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3329653.html"/>
    <content type="html">摘要：本章主要是收藏一些常用的类和接口，包括：万年历(农历、阳历节日、阴历节日)、自定义的Calendar接口。万年历源码如下(ChineseCalendar.java)： 1 package com.via.mce.monthcalendar.utils; 2 3 import java.util.Calendar; 4 import java.util.Date; 5 import java.util.GregorianCalendar; 6 import java.util.HashMap; 7 8 /** 9 * 农历日历。 10 * 将农历从1901年到2100年...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3329653.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3327482.html</id>
    <title type="text">        Java Calendar,Date,DateFormat,TimeZone,Locale等时间相关内容的认知和使用(1) Calendar</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3327482.html"/>
    <content type="html">摘要：Java 操作日期/时间，往往会涉及到Calendar，Date，DateFormat这些类。最近决定把这些内容系统的整理一下，这样以后使用的时候，会更得心应手。本章的内容是主要讲解“Java时间框架”以及“类Calendar”。在学习Calendar类时，我们先对它有个整体认识，心中建立一个框架，然后再通过示例学习如何使用它。Java 时间架构图Java 的Calendar, Date和DateFormat的关系图如下：说明：(01)milliseconds 表示毫秒。 milliseconds = “实际时间” - “1970-01-01 00:00:00”。Calendar 和 Da..        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3327482.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3345205.html</id>
    <title type="text">        Java 反射机制(包括组成、结构、示例说明等内容)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3345205.html"/>
    <content type="html">摘要：第1部分 Java 反射机制介绍Java 反射机制。通俗来讲呢，就是在运行状态中，我们可以根据“类的部分已经的信息”来还原“类的全部的信息”。这里“类的部分已经的信息”，可以是“类名”或“类的对象”等信息。“类的全部信息”就是指“类的属性，方法，继承关系和Annotation注解”等内容。举个简单的例子：假设对于类ReflectionTest.java，我们知道的唯一信息是它的类名是“com.skywang.Reflection”。这时，我们想要知道ReflectionTest.java的其它信息(比如它的构造函数，它的成员变量等等)，要怎么办呢？这就需要用到“反射”。通过反射，我们可以解析出        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3345205.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3344137.html</id>
    <title type="text">        Java Annotation认知(包括框架图、详细介绍、示例说明)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3344137.html"/>
    <content type="html">摘要：摘要Java Annotation是JDK5.0引入的一种注释机制。网上很多关于Java Annotation的文章，看得人眼花缭乱。Java Annotation本来很简单的，结果说的人没说清楚；弄的看的人更加迷糊。我按照自己的思路，对Annotation进行了整理。理解 Annotation 的关键，是理解Annotation的语法和用法，对这些内容，我都进行了详细说明；理解Annotation的语法和用法之后，再看Annotation的框架图，可能有更深刻体会。废话就说这么多，下面开始对Annotation进行说明。若您发现文章中存在错误或不足的地方，希望您能指出！第1部分 Annota        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3344137.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3341423.html</id>
    <title type="text">        Java 随机数</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3341423.html"/>
    <content type="html">摘要：本章先讲解Java随机数的几种产生方式，然后通过示例对其进行演示。广义上讲，Java中的随机数的有三种产生方式：(01). 通过System.currentTimeMillis()来获取一个当前时间毫秒数的long型数字。(02). 通过Math.random()返回一个0到1之间的double值。(03). 通过Random类来产生一个随机数，这个是专业的Random工具类，功能强大。第1种通过System.currentTimeMillis()来获取随机数。实际上是获取当前时间毫秒数，它是long类型。使用方法如下：final long l = System.currentTimeMill        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3341423.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3324958.html</id>
    <title type="text">        Java hashCode() 和 equals()的若干问题解答</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3324958.html"/>
    <content type="html">摘要：本章的内容主要解决下面几个问题：1 equals() 的作用是什么？2 equals() 与 == 的区别是什么？3 hashCode() 的作用是什么？4 hashCode() 和 equals() 之间有什么联系？第1部分 equals() 的作用equals() 的作用是 用来判断两个对象是否相等。equals() 定义在JDK的Object.java中。通过判断两个对象的地址是否相等(即，是否是同一个对象)来区分它们是否相等。源码如下：public boolean equals(Object obj) { return (this == obj);}既然Object.java中定...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3324958.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3324788.html</id>
    <title type="text">        Java 中 Comparable 和 Comparator 比较</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3324788.html"/>
    <content type="html">摘要：本文，先介绍Comparable 和Comparator两个接口，以及它们的差异；接着，通过示例，对它们的使用方法进行说明。Comparable 简介Comparable 是排序接口。若一个类实现了Comparable接口，就意味着“该类支持排序”。 即然实现Comparable接口的类支持排序，假设现在存在“实现Comparable接口的类的对象的List列表(或数组)”，则该List列表(或数组)可以通过 Collections.sort（或 Arrays.sort）进行排序。此外，“实现Comparable接口的类的对象”可以用作“有序映射(如TreeMap)”中的键或“有序集合(Tre        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3324788.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311275.html</id>
    <title type="text">        Java 集合系列18之 Iterator和Enumeration比较</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311275.html"/>
    <content type="html">摘要：概要这一章，我们对Iterator和Enumeration进行比较学习。内容包括：第1部分 Iterator和Enumeration区别第2部分 Iterator和Enumeration实例转载请注明出处：http://www.cnblogs.com/skywang12345/admin/EditPosts.aspx?postid=3311275第1部分 Iterator和Enumeration区别在Java集合中，我们通常都通过 “Iterator(迭代器)” 或 “Enumeration(枚举类)” 去遍历集合。今天，我们就一起学习一下它们之间到底有什么区别。我们先看看 Enumerati        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311275.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311126.html</id>
    <title type="text">        Java 集合系列14之 Map总结(HashMap, Hashtable, TreeMap, WeakHashMap等使用场景)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311126.html"/>
    <content type="html">摘要：概要学完了Map的全部内容，我们再回头开开Map的框架图。本章内容包括：第1部分 Map概括第2部分 HashMap和Hashtable异同第3部分 HashMap和WeakHashMap异同转载请注明出处：http://www.cnblogs.com/skywang12345/admin/EditPosts.aspx?postid=3311126第1部分 Map概括(01) Map 是“键值对”映射的抽象接口。(02) AbstractMap 实现了Map中的绝大部分函数接口。它减少了“Map的实现类”的重复编码。(03) SortedMap 有序的“键值对”映射接口。(04) Naviga        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311126.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3310928.html</id>
    <title type="text">        Java 集合系列12之 TreeMap详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3310928.html"/>
    <content type="html">摘要：概要这一章，我们对TreeMap进行学习。我们先对TreeMap有个整体认识，然后再学习它的源码，最后再通过实例来学会使用TreeMap。内容包括：第1部分 TreeMap介绍第2部分 TreeMap数据结构第3部分 TreeMap源码解析(基于JDK1.6.0_45)第4部分 TreeMap遍历方式第5部分 TreeMap示例转载请注明出处：http://www.cnblogs.com/skywang12345/admin/EditPosts.aspx?postid=3310928第1部分 TreeMap介绍TreeMap 简介TreeMap 是一个有序的key-value集合，它是通过红黑        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3310928.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3310887.html</id>
    <title type="text">        Java 集合系列11之 Hashtable详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3310887.html"/>
    <content type="html">摘要：概要前一章，我们学习了HashMap。这一章，我们对Hashtable进行学习。我们先对Hashtable有个整体认识，然后再学习它的源码，最后再通过实例来学会使用Hashtable。第1部分 Hashtable介绍第2部分 Hashtable数据结构第3部分 Hashtable源码解析(基于JDK1.6.0_45)第4部分 Hashtable遍历方式第5部分 Hashtable示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3310887.html第1部分 Hashtable介绍Hashtable 简介和HashMap一样，Hashtable         &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3310887.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3310835.html</id>
    <title type="text">        Java 集合系列10之 HashMap详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3310835.html"/>
    <content type="html">摘要：概要这一章，我们对HashMap进行学习。我们先对HashMap有个整体认识，然后再学习它的源码，最后再通过实例来学会使用HashMap。内容包括：第1部分 HashMap介绍第2部分 HashMap数据结构第3部分 HashMap源码解析(基于JDK1.6.0_45) 第3.1部分 HashMap的“拉链法”相关内容 第3.2部分 HashMap的构造函数 第3.3部分 HashMap的主要对外接口 第3.4部分 HashMap实现的Cloneable接口 第3.5部分 HashMap实现的Serializable接口第4部分 HashMap遍历方式第5部分 HashMap示例转载...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3310835.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308900.html</id>
    <title type="text">        Java 集合系列08之 List总结(LinkedList, ArrayList等使用场景和性能分析)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308900.html"/>
    <content type="html">摘要：概要前面，我们学完了List的全部内容(ArrayList, LinkedList, Vector, Stack)。Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例Java 集合系列04之 fail-fast总结(通过ArrayList来说明fail-fast的原理、解决办法)Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例Java 集合系列06之 Vector详细介绍(源码解析)和使用示例Java 集合系列07之 Stack详细介绍(源码解析)和使用示例现在，我们再回头看看总结一下List。内容包括：第1部分 List概括第2部分 Lis        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308900.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308807.html</id>
    <title type="text">        Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308807.html"/>
    <content type="html">摘要：概要前面，我们已经学习了ArrayList，并了解了fail-fast机制。这一章我们接着学习List的实现类——LinkedList。和学习ArrayList一样，接下来呢，我们先对LinkedList有个整体认识，然后再学习它的源码；最后再通过实例来学会使用LinkedList。内容包括：第1部分 LinkedList介绍第2部分 LinkedList数据结构第3部分 LinkedList源码解析(基于JDK1.6.0_45)第4部分 LinkedList遍历方式第5部分 LinkedList示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308807.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308762.html</id>
    <title type="text">        Java 集合系列04之 fail-fast总结(通过ArrayList来说明fail-fast的原理、解决办法)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308762.html"/>
    <content type="html">摘要：概要前面，我们已经学习了ArrayList。接下来，我们以ArrayList为例，对Iterator的fail-fast机制进行了解。内容包括：：1 fail-fast简介2 fail-fast示例3 fail-fast解决办法4fail-fast原理5 解决fail-fast的原理转载请注明出处：http://www.cnblogs.com/skywang12345/p/3308762.html1 fail-fast简介fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。例如：当某一个线程        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308762.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3323085.html</id>
    <title type="text">        Java 集合系列目录(Category)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3323085.html"/>
    <content type="html">摘要：下面是最近总结的Java集合(JDK1.6.0_45)相关文章的目录。01.Java 集合系列01之 总体框架02.Java 集合系列02之 Collection架构03.Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例04.Java 集合系列04之 fail-fast总结(通过ArrayList来说明fail-fast的原理、解决办法)05.Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例06.Java 集合系列06之 Vector详细介绍(源码解析)和使用示例07.Java 集合系列07之 Stack详细介绍(源码解析)和使用示例08.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3323085.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311268.html</id>
    <title type="text">        Java 集合系列17之 TreeSet详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311268.html"/>
    <content type="html">摘要：概要这一章，我们对TreeSet进行学习。我们先对TreeSet有个整体认识，然后再学习它的源码，最后再通过实例来学会使用TreeSet。内容包括：第1部分 TreeSet介绍第2部分 TreeSet数据结构第3部分 TreeSet源码解析(基于JDK1.6.0_45)第4部分 TreeSet遍历方式第5部分 TreeSet示例转载请注明出处：http://www.cnblogs.com/skywang12345/admin/EditPosts.aspx?postid=3311268第1部分 TreeSet介绍TreeSet简介TreeSet 是一个有序的集合，它的作用是提供有序的Set集合。        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311268.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311252.html</id>
    <title type="text">        Java 集合系列16之 HashSet详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311252.html"/>
    <content type="html">摘要：概要这一章，我们对HashSet进行学习。我们先对HashSet有个整体认识，然后再学习它的源码，最后再通过实例来学会使用HashSet。内容包括：第1部分 HashSet介绍第2部分 HashSet数据结构第3部分 HashSet源码解析(基于JDK1.6.0_45)第4部分 HashSet遍历方式第5部分 HashSet示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3311252.html第1部分 HashSet介绍HashSet 简介HashSet 是一个没有重复元素的集合。它是由HashMap实现的，不保证元素的顺序，而且HashSet        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311252.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311136.html</id>
    <title type="text">        Java 集合系列15之 Set架构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311136.html"/>
    <content type="html">摘要：前面，我们已经系统的对List和Map进行了学习。接下来，我们开始可以学习Set。相信经过Map的了解之后，学习Set会容易很多。毕竟，Set的实现类都是基于Map来实现的(HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。首先，我们看看Set架构。(01) Set 是继承于Collection的接口。它是一个不允许有重复元素的集合。(02) AbstractSet 是一个抽象类，它继承于AbstractCollection，AbstractCollection实现了Set中的绝大部分函数，为Set的实现类提供了便利。(03) HastSet 和 TreeS        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311136.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311092.html</id>
    <title type="text">        Java 集合系列13之 WeakHashMap详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311092.html"/>
    <content type="html">摘要：概要这一章，我们对WeakHashMap进行学习。我们先对WeakHashMap有个整体认识，然后再学习它的源码，最后再通过实例来学会使用WeakHashMap。第1部分 WeakHashMap介绍第2部分 WeakHashMap数据结构第3部分 WeakHashMap源码解析(基于JDK1.6.0_45)第4部分 WeakHashMap遍历方式第5部分 WeakHashMap示例转载请注明出处：http://www.cnblogs.com/skywang12345/admin/EditPosts.aspx?postid=3311092第1部分 WeakHashMap介绍WeakHashMap        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311092.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308931.html</id>
    <title type="text">        Java 集合系列09之 Map架构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308931.html"/>
    <content type="html">摘要：概要前面，我们已经系统的对List进行了学习。接下来，我们先学习Map，然后再学习Set；因为Set的实现类都是基于Map来实现的(如，HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。首先，我们看看Map架构。如上图：(01) Map 是映射接口，Map中存储的内容是键值对(key-value)。(02) AbstractMap 是继承于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码。(03) SortedMap 是继承于Map的接口。SortedMap中的内容是排序的键值对，排序的方法是        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308931.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308852.html</id>
    <title type="text">        Java 集合系列07之 Stack详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308852.html"/>
    <content type="html">摘要：概要学完Vector了之后，接下来我们开始学习Stack。Stack很简单，它继承于Vector。学习方式还是和之前一样，先对Stack有个整体认识，然后再学习它的源码；最后再通过实例来学会使用它。内容包括：第1部分 Stack介绍第2部分 Stack源码解析(基于JDK1.6.0_45)第3部分 ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308852.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308833.html</id>
    <title type="text">        Java 集合系列06之 Vector详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308833.html"/>
    <content type="html">摘要：概要学完ArrayList和LinkedList之后，我们接着学习Vector。学习方式还是和之前一样，先对Vector有个整体认识，然后再学习它的源码；最后再通过实例来学会使用它。第1部分 Vector介绍第2部分 Vector数据结构第3部分 Vector源码解析(基于JDK1.6.0_45)第4部分 Vector遍历方式第5部分 Vector示例转载请注明出处：http://www.cnblogs.com/skywang12345/p/3308833.html第1部分 Vector介绍Vector简介 Vector 是矢量队列，它是JDK1.0版本添加的类。继承于AbstractList        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308833.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308556.html</id>
    <title type="text">        Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308556.html"/>
    <content type="html">摘要：概要上一章，我们学习了Collection的架构。这一章开始，我们对Collection的具体实现类进行讲解；首先，讲解List，而List中ArrayList又最为常用。因此，本章我们讲解ArrayList。先对ArrayList有个整体认识，再学习它的源码，最后再通过例子来学习如何使用它。内容包括：第1部分 ArrayList简介第2部分 ArrayList数据结构第3部分 ArrayList源码解析(基于JDK1.6.0_45)第4部分 ArrayList遍历方式第5部分 toArray()异常第6部分 ArrayList示例转载请注明出处：http://www.cnblogs.com/        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308556.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308513.html</id>
    <title type="text">        Java 集合系列02之 Collection架构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308513.html"/>
    <content type="html">摘要：概要首先，我们对Collection进行说明。下面先看看Collection的一些框架类的关系图：Collection是一个接口，它主要的两个分支是：List 和 Set。List和Set都是接口，它们继承于Collection。List是有序的队列，List中可以有重复的元素；而Set是数学概念中的集合，Set中没有重复元素！List和Set都有它们各自的实现类。为了方便，我们抽象出了AbstractCollection抽象类，它实现了Collection中的绝大部分函数；这样，在Collection的实现类中，我们就可以通过继承AbstractCollection省去重复编码。Abstra        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308513.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3308498.html</id>
    <title type="text">        Java 集合系列01之 总体框架</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3308498.html"/>
    <content type="html">摘要：Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)、。Java集合工具包框架图(如下)：大致说明：看上面的框架图，先抓住它的主干，即Collection和Map。1 Collection是一个接口，是高度抽象出来的集合，它包含了集合的基本操作和属性。 Collection包含了List和Set两大分支。 (01) List是一个有序的        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3308498.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311915.html</id>
    <title type="text">        [转载] 散列表(Hash Table) 从理论到实用（下）</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311915.html"/>
    <content type="html">摘要：转载自：　白话算法(6) 散列表(Hash Table) 从理论到实用（下） 【澈丹，我想要个钻戒。】【小北，等等吧，等我再修行两年，你把我烧了，舍利子比钻戒值钱。】 ——自扯自蛋 无论开发一个程序还是谈一场恋爱，都差不多要经历这么4个阶段： 1）从零开始。没有束缚的轻松感。似乎拥有无限的可能性，也有相当多的不确定，兴奋、紧张和恐惧。 2）从无到有。无从下手的感觉。一步一坎，进展缓慢。走弯路，犯错，投入很多产出很少。目标和现实之间产生强大的张力。疑惑、挫败、焦急和不甘心。 3）渐入佳境。快速成长。创新，充实，满足。但是在...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311915.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311909.html</id>
    <title type="text">        [转载] 散列表(Hash Table)从理论到实用（中）</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311909.html"/>
    <content type="html">摘要：转载自：白话算法(6) 散列表(Hash Table)从理论到实用（中） 不用链接法，还有别的方法能处理碰撞吗？扪心自问，我不敢问这个问题。链接法如此的自然、直接，以至于我不敢相信还有别的（甚至是更好的）方法。推动科技进步的人，永远是那些敢于问出比外行更天真、更外行的问题，并且善于运用丰富的想象力找到新的可能性，而且有能力运用科学的方法实践的人。 如果可以不用链表，把节省下来的链表的指针所占用的空间用作空槽，就可以减少碰撞的机会，提高查找速度。使用开放寻址法处理碰撞 不用额外的链表，以及任何其它额外的数据结构，就只用一个数组，在发生碰撞的时候怎么办呢？答案只能是，再找另一个空着的槽啦！这...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311909.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3311899.html</id>
    <title type="text">        [转载] 散列表(Hash Table)从理论到实用（上）</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3311899.html"/>
    <content type="html">摘要：转载自：白话算法(6) 散列表(Hash Table)从理论到实用（上）　处理实际问题的一般数学方法是，首先提炼出问题的本质元素，然后把它看作一个比现实无限宽广的可能性系统，这个系统中的实质关系可以通过一般化的推理来论证理解，并可归纳成一般公式，而这个一般公式适用于任何特殊情况。 ——R.A. Fisher 在一个解决方案的复杂性之中，理论或者概念的部分通常只占有限的一小部分。理论无法做实际的工作——否则它也不成其为理论了。从理论到实用，需要经过一系列的发明。从实用到更加实用、更加通用，往往需要增加更多的复杂性。有...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3311899.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3264991.html</id>
    <title type="text">        Android 之窗口小部件高级篇--App Widget 之 RemoteViews</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3264991.html"/>
    <content type="html">摘要：Android 之窗口小部件高级篇--App Widget 之 RemoteViews 在之前的一篇博文(Android 之窗口小部件详解--App Widget)中，已经介绍了App Widget的基本用法和简单实例。这篇主要讲解 App Widget 的高级内容，即通过 RemoteViews 去管理Widget的中GridView、ListView、StackView等内容。在学习本篇之前，建议读者先掌握 App Widget 的基本知识。1 RemoteViews等相关类的介绍下面先简单介绍RemoteViews、RemoteViewsService、RemoteViewsFactor        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3264991.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3263724.html</id>
    <title type="text">        Android控件之GridView</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3263724.html"/>
    <content type="html">摘要：Android控件之GridView1 GridView介绍GridView是网格视图，它按照行列的方式来显示内容的。常用于九宫格内容显示。1.1 GridView属性说明android:columnWidth设置列的宽度。android:gravity设置此组件中的内容在组件中的位置。可选的值有：top、bottom、left、right、center_vertical、fill_vertical、center_horizontal、fill_horizontal、center、fill、clip_vertical可以多选，用“|”分开。android:horizontalSpacing两列        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3263724.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3245399.html</id>
    <title type="text">        红黑树(一)之 原理和算法详细介绍</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3245399.html"/>
    <content type="html">摘要：概要目录1 红黑树的介绍2 红黑树的应用3 红黑树的时间复杂度和相关证明4 红黑树的基本操作(一) 左旋和右旋5 红黑树的基本操作(二) 添加6 红黑树的基本操作(三) 删除 作者：Sky Wang 于 2013-08-08 概述：R-B Tree，又称为“红黑树”。...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3245399.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165544.html</id>
    <title type="text">        Android Service总结06 之AIDL</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165544.html"/>
    <content type="html">摘要：Android Service总结06 之AIDL版本版本说明发布时间发布人V1.0初始版本2013-04-03Skywang1 AIDL介绍 AIDL，即Android InterfaceDefinition Language。 Android使用AIDL来完成进程间通信(IPC)，并且一般在服务需要接受不同应用多线程的请求时才需要使用AIDL；如果是同一个应用内的请求使用Binder实现即可；如果只是应用间通信而不是多线程处理的话使用Messenger，当然这两种情况也可以使用AIDL。本地进程和远程进程使用AIDL有所不同，本地进程内调用时会都在调用的线程内执行，远程进程使用...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165544.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165546.html</id>
    <title type="text">        Android Service总结05 之IntentService</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165546.html"/>
    <content type="html">摘要：Android Service总结05 之IntentService版本版本说明发布时间发布人V1.0添加了IntentService的介绍和示例 2013-03-17Skywang1 IntentService介绍IntentService继承与Service，它最大的特点是对服务请求逐个进行处理。当我们要提供的服务不需要同时处理多个请求的时候，可以选择继承IntentService。IntentService有以下特点：（1） 它创建了一个独立的工作线程来处理所有的通过onStartCommand()传递给服务的intents。（2） 创建了一个工作队列，来逐个发送intent给onH..        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165546.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3168522.html</id>
    <title type="text">        Android Service总结04 之被绑定的服务 -- Bound Service</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3168522.html"/>
    <content type="html">摘要：Android Service总结04 之被绑定的服务 -- Bound Service版本版本说明发布时间发布人V1.0添加了Service的介绍和示例2013-03-17Skywang1 Bound Service说明 Bound Service，即被绑定的服务，和Started Service一样，它也是2种常见服务之一。它常被用在执行进程的某个后台操作或进程间通讯(IPC)。实现步骤和使用方法(01) 创建一个Bound Service类，该类要继承于Service。(02) 在Bound Service类中实现以下接口： onCreate():可以不用实现，视用户需求而定。当服务被创        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3168522.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165545.html</id>
    <title type="text">        Android Service总结03 之被启动的服务 -- Started Service</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165545.html"/>
    <content type="html">摘要：Android Service总结03 之被启动的服务 -- Started Service版本版本说明发布时间发布人V1.0添加了Service的介绍和示例2013-03-17Skywang1 Started Service介绍 Started Service，即被启动的服务。它是2种常见服务之一，另一种是Bound Service。Started Service常被用在执行进程的某个后台操作，如通过该服务来实现文件下载等功能。 实现步骤和使用方法(01) 创建一个Started Service类，该类要继承于Service。(02) 在Started Service类中实现以下接口： on        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165545.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3168946.html</id>
    <title type="text">        Android Service总结01 目录</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3168946.html"/>
    <content type="html">摘要：Android Service总结01 目录1Android Service总结01 目录2Android Service总结02 service介绍 介绍了“4种service 以及 它们的区别”、“”2种常见service的创建流程、生命周期”等。3Android Service总结03 之被启动的服务 -- Started Service 详细的介绍了“Started Service”的特性，并通过示例对“Started Service”的实现步骤和使用方法进行了说明。4Android Service总结04 之被绑定的服务 -- Bound Service 详细的介绍了“Bound S        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3168946.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165547.html</id>
    <title type="text">        Android Service总结02 service介绍</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165547.html"/>
    <content type="html">摘要：Android Service总结02 service介绍版本版本说明发布时间发布人V1.0介绍了Service的种类，常用API，生命周期等内容。2013-03-16Skywang概要 若读者之前没接触过service，对下面内容有个大致了解即可。待使用过service之后再来阅读本章内容，会理解更深刻。 service是Android四大组件之一，其余的是activity、BroadcastReceiver、Content Provider。service是一个能够在后台执行长时操作的应用程序组件，它不提供用户界面。应用程序能够通过service来启动后台操作，不同应用程序也能够通过ser        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165547.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/2937981.html</id>
    <title type="text">        Android 数据存储04之Content Provider</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/2937981.html"/>
    <content type="html">摘要：Content Provider版本修改内容日期修改人V1.0原始版本2013/2/25skywang 1 URI通用资源标志符（Universal Resource Identifier, 简称&amp;quot;URI&amp;quot;）。URI由许多部分所组成，示例及解说如下：2 Content URIsContent URIs就是Android遵照URI的标准，定义的一种专用的URI。Android提供了ContentUris、UriMatcher类来操作Content URIs。2.1 Content URIs说明Content URIs的语法如下：content://authority/path        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/2937981.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/2936042.html</id>
    <title type="text">        Android 数据存储03之SQLite</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/2936042.html"/>
    <content type="html">摘要：SQLite数据存储Android 集成了 SQLite 数据库。它存储在 /data/data//databases/ 下。Android 开发中使用 SQLite 数据库 Activites 可以通过 Content Provider 或者 Service 访问一个数据库。Android数据库中主要涉及到的类有：SQLiteOpenHelper、SQLiteDatabase、Cursor、Context。(01)SQLiteOpenHelper：它是 SQLiteDatabase的辅助类，主要功能是辅助管理数据库，如管理数据库的创建和版本。(02)SQLiteDatabase：它是Andr        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/2936042.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/2936043.html</id>
    <title type="text">        Android 数据存储02之文件读写</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/2936043.html"/>
    <content type="html">摘要：Android文件读写版本修改内容日期修改人V1.0原始版本2013/2/25skywang Android文件读写的有两种方式。一种，是通过标准的JavaIO库去读写。另一种，是通过Context提供的接口去读写。两种方式的原理是一样的，只是API接口不同。下面分别对两种方式进行介绍。1 通过Java IO库读写文件当我们想读写公用的目录，如图片、提示音；或者读写外部扩展卡上的文件时，一般都选择通过Java IO库去读写。当通过Java IO库去读写文件时，一般会用到Android Enviroment的接口(如读取外部sdcard的路径、状态等)。1.1 Android Enviro...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/2936043.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165652.html</id>
    <title type="text">        Android 数据存储01之SharedPreferences</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165652.html"/>
    <content type="html">摘要：Android 数据存储01之SharedPreferences版本修改内容日期修改人V1.0原始版本2013/2/20skywang1 SharedPreferences概括SharedPreferences是Android平台上一个轻量级的存储类，主要是保存一些常用的配置比如窗口状态，一般在Activity中 重载窗口状态onSaveInstanceState保存一般使用SharedPreferences完成，它提供了Android平台常规的Long长 整形、Int整形、String字符串型的保存。 它的本质是基于XML文件存储key-value键值对数据，通常用来存储一些简单的配置信息。        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165652.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3160260.html</id>
    <title type="text">        Android App组件之ListFragment -- 说明和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3160260.html"/>
    <content type="html">摘要：Android App组件之ListFragment -- 说明和示例1 ListFragement介绍 ListFragment继承于Fragment。因此它具有Fragment的特性，能够作为activity中的一部分，目的也是为了使页面设计更加灵活。 相比Fragment，ListFragment的内容是以列表(list)的形式显示的。1.1 ListFragment布局 ListFragment的布局默认包含一个list view。因此，在ListFragment对应的布局文件中，必须指定一个 android:id 为 “@android:id/list” 的ListView控...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3160260.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3160224.html</id>
    <title type="text">        Android App组件之Fragment说明和示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3160224.html"/>
    <content type="html">摘要：Android App组件之Fragment说明和示例1 Fragement介绍Android从3.0开始引入Fragment，主要是为了支持更动态更灵活的界面设计。 Fragment是activity的界面中的一部分或一种行为。你可以把多个Fragment们组合到一个activity中来创建一个多面界面，你也可以在多个activity中重用一个Fragment。你可以把Fragment认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在activity运行时被添加或删除。 需要注意的是：Fragment不能独立存在，它必须嵌入到activity中，而且Fr...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3160224.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165405.html</id>
    <title type="text">        Android App组件之Activity</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165405.html"/>
    <content type="html">摘要：Android App组件之Activity1 activit介绍 Activities 是Android的四大组件之一，其余三大组件是service、broadcast和content provider。它的主要功能是提供界面。一个acivity对应一个界面。 当一个activity因为新的activity启动而被停止时，它会收到状态变化的通知，这样的变化有多个，每个都会引起系统调用一个相应的回调方法以通知activity，这些回调方法被统称为“生命周期回调方法”。这些回调方法分别在Activity被创建、停止、恢复、销毁时被调用。2 activity声明周期上面是官方给出的activity        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165405.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3165445.html</id>
    <title type="text">        Android控件之ImageSwticher</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3165445.html"/>
    <content type="html">摘要：Android控件之ImageSwticher1. ImageSwticher介绍 ImageSwitcher是图片切换的控件，它能实现图片切换时的动画效果，包括图片导入效果、图片消失效果等等。Android系统提供了许多不同的动画效果供我们选择。2. 应用示例 示例说明：新建一个activity，包括一个ImageSwitcher控件。ImageSwitcher中的图片，每5秒钟变换一个。 代码说明：package com.skywang.control;import android.app.Activity;import android.content.Context;import and        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3165445.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3158310.html</id>
    <title type="text">        Android 之窗口小部件详解--App Widget</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3158310.html"/>
    <content type="html">摘要：Android 之窗口小部件详解--App Widget版本号说明作者日期1.0添加App Widge介绍和示例Sky Wang2013/06/271 App Widget简介App Widget是应用程序窗口小部件（Widget）是微型的应用程序视图，它可以被嵌入到其它应用程序中（比如桌面）并接收周期性的更新。你可以通过一个App Widget Provider来发布一个Widget。本文参考Android官方文本，先介绍App Widget的主要组件，然后再以示例来详细说明。2 App Widget主要的相关类介绍2.1 AppWidgetProviderAppWidgetProvider        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3158310.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154474.html</id>
    <title type="text">        Java引用总结--StrongReference、SoftReference、WeakReference、PhantomReference</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154474.html"/>
    <content type="html">摘要：Java引用总结--StrongReference、SoftReference、WeakReference、PhantomReference1 Java引用介绍 Java从1.2版本开始引入了4种引用，这4种引用的级别由高到低依次为： 强引用 &amp;gt; 软引用 &amp;gt; 弱引用 &amp;gt; 虚引用⑴强引用（StrongReference） 强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。⑵软引用（SoftReference）        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154474.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154150.html</id>
    <title type="text">        Android 布局之GridLayout</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154150.html"/>
    <content type="html">摘要：Android 布局之GridLayout1 GridLayout简介GridLayout是Android4.0新提供的网格矩阵形式的布局控件。GridLayout的继承关系如下：java.lang.Object --&amp;gt; android.view.View --&amp;gt; android.view.ViewGroup --&amp;gt; android.widget.GridLayoutGridLayout包含的属性如下：android:alignmentMode属性说明：当设置alignMargins，使视图的外边界之间进行校准。可以取以下值：alignBounds -- 对齐子视图边界。al        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154150.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154093.html</id>
    <title type="text">        Android 布局之FrameLayout</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154093.html"/>
    <content type="html">摘要：Android 布局之FrameLayout1 FrameLayout简介对于FrameLayout，官方介绍是：FrameLayout is designed to block out an area on the screen to display a single item. Generally, FrameLayout should be used to hold a single child view, because it can be difficult to organize child views in a way that&amp;#39;s scalable to differe        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154093.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154083.html</id>
    <title type="text">        Android 布局之TableLayout</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154083.html"/>
    <content type="html">摘要：Android 布局之TableLayout1 TableLayout简介TableLayout是表格布局。TableLayout 可设置的属性包括全局属性及单元格属性。1.1 全局属性有以下3个参数：android:stretchColumns 设置可伸展的列。该列可以向行方向伸展，最多可占据一整行。android:shrinkColumns 设置可收缩的列。当该列子控件的内容太多，已经挤满所在行，那么该子控件的内容将往列方向显示。android:collapseColumns 设置要隐藏的列。示例：android:stretchColumns=&amp;quot;0&amp;quot; ---- 第0列可        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154083.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154062.html</id>
    <title type="text">        Android 布局之RelativeLayout</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154062.html"/>
    <content type="html">摘要：Android 布局之RelativeLayout1 RelativeLayout简介RelativeLayout是相对布局。RelativeLayout布局属性1.1 与parent相对的属性android:layout_alignParentTop表示widget的顶部和Container的顶部对齐。android:layout_alignParentBottom表示widget的底部和Container的底部对齐。android:layout_alignParentStart表示widget的左边和Container的起始边缘对齐。android:layout_alignParentEn        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154062.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3154049.html</id>
    <title type="text">        Android 布局之LinearLayout</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3154049.html"/>
    <content type="html">摘要：Android 布局之LinearLayout1 LinearLayout简介LinearLayout是线程布局。它包括2个方向(android:orientation)：“水平”(horizontal)和“竖值”(vertical)。2 LinearLayout示例创建一个activity，包含2组LinearLayout：一组LinearLayout中包含3个文本，文本是水平排列；另一组LinearLayout中包含3个文本，文本是竖值排列。layout文件 点击下...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3154049.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3144118.html</id>
    <title type="text">        编辑器之神VIM 总结(一) 基础部分</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3144118.html"/>
    <content type="html">摘要：版本号说明作者日期1.0vim基础知识Sky Wang2013/06/19概要vim和emacs，一个是编辑器之神，一个是神一样的编辑器。他们被称是UNIX系统下的倚天和屠龙，“二者得一，可得天下！”几年前，自从笔者学会了VIM，就再也不想回到以前windows系统下的notepad、word、ue等编辑器了；甚至编程的时候，都不习惯使用其它的IDE了，如visual studio、visual c++ 6.0、source insight、eclipse等等。原因很简单，VIM高效很多！它非常适合程序员使用，学会VIM之后，能让你在编程时，双手一直游离在键盘之上，而不需要移开去操作鼠标。接下        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3144118.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3142851.html</id>
    <title type="text">        Android按键添加和处理的方案</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3142851.html"/>
    <content type="html">摘要：Android按键添加和处理的方案 版本号说明作者日期1.0Android按键添加和处理的方案Sky Wang2013/06/18需求：Android机器上有个Wifi物理按键，现在需求通过点击“wifi物理按键”能够快速的开启/关闭wifi。 实现方案经过思考之后，拟出下面几种方案：方案一，在linux kernel的驱动中捕获“wifi物理按键”。在kernel的按键驱动中截获“wifi”按键，并对其进行处理：若是“wifi”是开启的，则关闭wifi；否则，打开wifi。方案二，在Android中添加一个服务，监听wifi按键消息。若监听到“wifi”按键，则读取wifi的状态：若是“wi        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3142851.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/logo.html</id>
    <title type="text">        Android 开机画面和wallpaper总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/logo.html"/>
    <content type="html">摘要：Android 开机画面和wallpaper总结1 kernel的开机画面修改1、图片需求：图片格式：png图片大小：1024x600(具体示lcd分辨率而定)。2、转换图片png图片。假设logo.png已经在目录&amp;quot;kernel/drivers/video/logo/logo.png&amp;quot;下，在kernel中依次执行一下步骤：# cd kernel/drivers/video/logo# pngtopnm logo.png &amp;gt; logo_linux.pnm# pnmquant 224 logo_linux.pnm &amp;gt; logo_linux_clut224.pnm#        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/logo.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/p/3141610.html</id>
    <title type="text">        Android manifest之manifest标签详细介绍</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/p/3141610.html"/>
    <content type="html">摘要：AndroidManifest详细介绍本文主要对AndroidManifest.xml文件中各个标签进行说明。索引如下：概要PART--01 manifest标签PART--02 安全机制和permissionPART--02.01 permission标签PART--02.02 permission-group标签PART--02.03 permission-tree标签PART--02.04 uses-permission标签PART--03 instrumention标签PART--04 uses-sdk标签PART--05 uses-configuration标签PART--06 us        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3141610.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123438.html</id>
    <title type="text">        Android控件之TimePicker和DatePicker</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123438.html"/>
    <content type="html">摘要：Android控件之TimePicker和DatePicker1 Picker简介DatePicker和TimePicker分别提供日期和时间的选择试图；通过它们得到的日期和时间是格式化的。2 Picker示例写一个activity，包含一个“日期”按钮和一个“时间”按钮。点击“日期”按钮，进入“日期”选择界面。点击“时间”按钮，进入“时间”选择界面。应用层代码package com.skywang.picker;import android.os.Bundle;import android.app.Activity;import android.view.View;import androi        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123438.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123403.html</id>
    <title type="text">        Android控件之ProgressBar</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123403.html"/>
    <content type="html">摘要：Android控件之ProgressBar1 ProgressBar简介ProgressBar是进度条，常用于显示程序加载/安装进度等。2 ProgressBar示例创建一个activity，包含1个ProgressBar。在Activity中开启一个线程，线程不断的增加ProgressBar的进度；当进度增加满的时候，隐藏ProgressBar。应用层代码package com.skywang.control;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123403.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123562.html</id>
    <title type="text">        Android控件之SeekBar</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123562.html"/>
    <content type="html">摘要：Android控件之SeekBar1 SeekBar简介SeekBar是进度条。我们使用进度条时，可以使用系统默认的进度条；也可以自定义进度条的图片和滑块图片等。2 SeekBar示例创建一个activity，包含2个SeekBar。第1个SeekBar是系统默认的SeekBar。第2个SeekBar是自定义SeekBar，使用自定义的背景图和滑块图片。应用层代码package com.skywang.control;import android.os.Bundle;import android.app.Activity;import android.util.Log;import andro        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123562.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123053.html</id>
    <title type="text">        Android控件之Spinner</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123053.html"/>
    <content type="html">摘要：Android控件之Spinner1 Spinner简介Spinner是下拉列表。http://developer.android.com/reference/android/widget/Spinner.htmlhttp://developer.android.com/guide/topics/ui/controls/spinner.html2 Spinner示例创建一个activity，包含2个Spinner。第一个spinner，显示星球选项。第二个spinner，显示颜色选项。应用层代码package com.skywang.control;import android.os.Bund        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123053.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122928.html</id>
    <title type="text">        Android控件之ListView</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122928.html"/>
    <content type="html">摘要：Android控件之ListView点击下载：源代码1 listview介绍list view(列表试图)是一个view group(视图集合)。包括一个adapter(适配器)，用于从数组或数据库中读取数据，并将这些数据显示在视图中。参考链接：http://developer.android.com/reference/android/widget/ListView.htmlhttp://developer.android.com/guide/topics/ui/layout/listview.htmllistview包括3个元素：(01) ListView : 用来展示列表的View。(0        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122928.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123319.html</id>
    <title type="text">        Android控件之ZoomButton</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123319.html"/>
    <content type="html">摘要：Android控件之ZoomButton1 ZoomButton简介ZoomButton，称为放大按钮。实际上它继承于ImageButton，并在ImageButton基础上增加了“按下ZoomButton时，会不断上报点击事件”。至于上报的时间间隔，可以通过setZoomSpeed()去设置。2 ZoomButton示例对比ZoomButton和ImageButton。写一个activity，包含一个ZoomButton和一个ImageButton。点击ZoomButton和ImageButton时，分别会放大不同的文本。测试时，请分别按住它们不放，查看效果。应用层代码package com        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123319.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123260.html</id>
    <title type="text">        Android控件之ZoomControls</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123260.html"/>
    <content type="html">摘要：Android控件之ZoomControls1 ZoomControls简介ZoomButton是一个放大缩小按钮。点击它的放大按钮，它能不断的上报放大事件；点击它的缩小按钮，它能不断的上报缩小事件。上报的时间间隔可以控制，而且ZoomButton可以隐藏。2 ZoomControls示例写一个activity，包含一个ZoomControls。点击ZoomControls，能够缩放文字。应用层代码package com.skywang.control;import android.os.Bundle;import android.app.Activity;import android.vie        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123260.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123046.html</id>
    <title type="text">        Android控件之Switch</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123046.html"/>
    <content type="html">摘要：Android控件之Switch1 Switch简介Switch用于开关按钮。Switch和ToggleButton稍有区别：ToggleButton是按下弹起的开关，而Switch是左右滑动的开关。2 Switch示例创建一个activity，包含1个Switch。应用层代码package com.skywang.control;import android.os.Bundle;import android.app.Activity;import android.view.View;import android.widget.CompoundButton;import android.wid        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3123046.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122913.html</id>
    <title type="text">        Android控件之RadioButton</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122913.html"/>
    <content type="html">摘要：Android控件之RadioButtonRadioButton示例创建一个activity，包含3个RadioButton：默认选中第一个；并且点击每个button都会给出相应的提示语。应用层代码package com.skywang.control;import android.os.Bundle;import android.app.Activity;import android.widget.RadioButton;import android.widget.Toast;import android.view.View;import android.view.View.OnClickL        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3122913.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116408.html</id>
    <title type="text">        Android控件之ImageButton</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116408.html"/>
    <content type="html">摘要：Android控件之ImageButton1 ImageButton介绍ImageButton是图片按钮，用户能自定义按钮的图片。ImageButton的drawable state值说明：(01) android:drawable 默认图片，等于一个drawable资源(02) android:state_pressed 按下状态的图片(03) android:state_focused 获得焦点状态的图片，比如用户选择了一ImageButton(04) android:state_hovered 光标悬停状态的图片，通常与focused state相同，它是4.0的新特性(05) ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116408.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116401.html</id>
    <title type="text">        Android控件之ToggleButton</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116401.html"/>
    <content type="html">摘要：Android控件之ToggleButton1 ToggleButton简介ToggleButton用于开关按钮。2 ToggleButton示例创建一个activity，包含2个ToggleButton。第一个ToggleButton，采用系统默认的图片；选中时，显示“Sel”，未选中时，显示“Un-sel”。第二个ToggleButton，采用自定义图片。总共有4种状态：选中状态，选中按下状态，未选中状态，未选中按下状态。应用层代码layout文件manifest文件点击下载：源代码运行效果：如图        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116401.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116402.html</id>
    <title type="text">        Android控件之Toast</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116402.html"/>
    <content type="html">摘要：Android控件之Toast1 Toast说明Toast的作用是给出一个简短的说明信息。例如，当你要显示一段提示语给用户时(比如“设置已保存”)，你可以使用Toast。Toast永远都不会获取节焦点。2 Toast示例创建一个activity，包含3个按钮。点击按钮1，创建Toast(即toast01)。点击按钮2，若toast01仍然显示，则关闭toast01；否则什么都不做。点击按钮3，创建Toast(即toast02)。按钮1和按钮3的Toast的创建方法稍微有点差异。应用层代码package com.skywang.control;import android.os.Bundle;i        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116402.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3114136.html</id>
    <title type="text">        Android控件之CheckBox</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3114136.html"/>
    <content type="html">摘要：Android控件之CheckBox1 CheckBox实现方式在介绍CheckBox的实现方式之前，先看看CheckBox类的父类。java.lang.Object ↳	android.view.View ↳	android.widget.TextView ↳	android.widget.Button ↳	android.widget.CompoundButton ↳	android.widget.CheckBox从中我们可以看出CheckBox继承与Button。所以，Button的实现方式都适用于CheckBox。另外，CheckBox的直接父类是CompoundB...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3114136.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116404.html</id>
    <title type="text">        Android控件之ImageView</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116404.html"/>
    <content type="html">摘要：Android控件之ImageView1 ImageView介绍ImageView是图片显示控件，专门用来显示图片的。ImageView的scaleType属性值说明：(01) ImageView.ScaleType.CENTER|android:scaleType=&amp;quot;center&amp;quot; 以原图的几何中心点和ImagView的几何中心点为基准,按图片的原来size居中显示，不缩放，当图片长/宽超过View的长/宽，则截取图片的居中部分显示ImageView的size.当图片小于View 的长宽时，只显示图片的size,不剪裁。(02) ImageView.ScaleType.C        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3116404.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/3113871.html</id>
    <title type="text">        Android控件之Button</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/3113871.html"/>
    <content type="html">摘要：Android控件之Button1 Button介绍Button是Android提供的按钮控件。它继承于TextView，详细继承关系如下：java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.Button它继承了View和TextView的所有属性。所以，使用时，可以参考View的属性和TextView的属性对Button进行设计。2 Button常用的三种实现方式方式一: 匿名实现View.OnClickListener接口匿名实现，即通过匿名类的方式去实现类View...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/3113871.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/AndroidAttr.html</id>
    <title type="text">        Android layout属性详细说明</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/AndroidAttr.html"/>
    <content type="html">摘要：Android layout属性详细说明版本号说明作者日期1.0添加Android4.2对应的View和TextView属性的说明Sky Wang2013/06/15文本总结了Android4.2 layout中用到的视图属性，包括View的属性和TextView的属性。这些属性适用于所有继承于View或者TextView的控件，包括Button、EditText、ListView、ImageView等等几乎所有的widget控件。具体用到某个widget控件时，可以通过查看该widget的继承关系，来判断本文中的属性是否适用于该控件。例如，可以通过以下方法判断Button是否能使用View或        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/AndroidAttr.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/15/edittext.html</id>
    <title type="text">        Android控件之EditText</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/15/edittext.html"/>
    <content type="html">摘要：Android控件之EditText应用实例新建一个activity，有一个空间edittext和两个button。点击其中的一个button，显示edittext的文本；点击另一个button，删除exittext的最后一个字符。应用程序代码 1 package com.skywang.control; 2 3 import android.os.Bundle; 4 import android.app.Activity; 5 import android.view.Menu; 6 import android.widget.Toast; 7 import android.widget.B.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/15/edittext.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/14/3113829.html</id>
    <title type="text">        Android控件之TextView</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/14/3113829.html"/>
    <content type="html">摘要：Android控件之TextView1 TextView介绍TextView是Android的文本显示器，主要用于文本显示。Android的TextView提供了许多属性和方法用于显示参数设置，参考下面表格：2 TextView示例建立一个activity，分别3个文本；第一个文本，采用默认的字体大小和字体颜色置。第二个文本，字体大小24sp，字体颜色绿色。第三个文本，字体大小32sp，字体颜色#FF00BBCC。其中FF表示透明度为不透明，00BBCC是颜色值。应用层代码 1 package com.skywang.control; 2 3 import android.app.Activ.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/14/3113829.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html</id>
    <title type="text">        skywang的博客目录(持续更新中...)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html"/>
    <content type="html">摘要：Java 知识知识点01.Java 随机数02,Java hashCode() 和 equals()的若干问题解答03,Java 中 Comparable 和 Comparator 比较04.Java Annotation认知(包括框架图、详细介绍、示例说明)05.Java引用总结--StrongReference、SoftReference、WeakReference、PhantomReference系列专题的目录01. Java String系列 (共3篇)02.Java异常系列 (共3篇)03.Java 时间日期系列(共7篇)04.java io系列 (共26篇)05...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/31/3107871.html</id>
    <title type="text">        Linux bash总结(二) 高级部分(适合初学者学习和非初学者参考)﻿ (持续更新中...)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/31/3107871.html"/>
    <content type="html">摘要：Linux bash总结(二) 高级部分(适合初学者学习和非初学者参考) (持续更新中...)版本号说明作者日期1.0添加awk和sed的说明Sky Wang2013/05/311.1(01) 添加正则表达式(第3部分)(02) 修改awk中错误内容Sky Wang2013/06/05本文主要通过实例对bash中需要用到的一些高级工具(如awk、sed、...)进行说明。学习的时候，请以“应用实例”为中心，以其它内容为参考进行学习。如果遇到文章中未讲解的内容，可以通过man去查阅用法。转载请注明出处：Linux bash总结(二) 高级部分(适合初学者学习和非初学者参考) (持续更新中...)        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/31/3107871.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html</id>
    <title type="text">        Linux bash总结(一) 基础部分(适合初学者学习和非初学者参考)</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html"/>
    <content type="html">摘要：早上起来，外面的雨下的稀里哗啦……本来事先约定好的朋友聚餐也因此取消了。心想，闲着也是闲着，不如将自己所学的bash脚本知识梳理一遍。一来，可以给bash初学者提供一个学习平台；再者，非初学者书写脚本时，也能以此为参考。若您在阅读时，文章能给您一点点启发，那我的目的就达到了。花了3天功夫，终于整理完毕了。可能还有许多需要完善的地方，希望读者能给出宝贵的意见！鉴于文章内容比较多，下面先介绍一下主要内容。第一部分 bash简介 —— 对bash进行简要介绍第二部分 bash示例和书写流程 —— 以一个简单的bash为例，说明书写、执行bash的流程第三部分 bash基础语法 —— 本章内容...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093593.html</id>
    <title type="text">        Android JNI和NDK学习(09)--JNI实例二 传递类对象</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093593.html"/>
    <content type="html">摘要：Android JNI和NDK学习(09)--JNI实例二 传递类对象1 应用层代码NdkParam.java是JNI函数的调用类，它的代码如下：package com.skywang.ndk;import android.app.Activity;import android.os.Bundle;import android.util.Log;public class NdkParam extends Activity { public static final String TAG=&amp;quot;skywang--NdkParam&amp;quot;; /** Called when the act        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093593.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093580.html</id>
    <title type="text">        Android JNI和NDK学习(08)--JNI实例一 传递基本类型数据</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093580.html"/>
    <content type="html">摘要：Android JNI和NDK学习(08)--JNI实例一 传递基本类型数据本文介绍在Java和JNI之间相互传递基本数据类型的方法。由于前面已经详细介绍搭建和建立NDK工程的完整流程(参考“静态实现流程”或“动态实现流程”)，这里就不再介绍流程；而是将重点放在说明如何实现Java和JNI之间相互传递基本数据。1 建立eclipse工程建立工程NdkBasicParam，NdkBasicParam.java的内容如下：package com.skywang.ndk;import android.app.Activity;import android.os.Bundle;import andro        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/26/3093580.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094051.html</id>
    <title type="text">        Android JNI和NDK学习(07)--JNI的常用API</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094051.html"/>
    <content type="html">摘要：Android JNI和NDK学习(07)--JNI的常用API1 版本和类操作API2 对象域相关API2.1 GetFieldIDjfieldID GetFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);函数作用： 返回类的实例(非静态)域的域 ID。参数说明： env:JNI 接口指针。 clazz:Java 类对象。 name: 0 终结的 UTF-8 字符串中的域名。 sig:0 终结的 UTF-8 字符串中的域签名。2.2 Set&amp;lt;type&amp;gt;Fieldvoid...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094051.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094037.html</id>
    <title type="text">        Android JNI和NDK学习(06)--JNI的数据类型</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094037.html"/>
    <content type="html">摘要：Android JNI和NDK学习(06)--JNI的数据类型本文介绍JNI的数据类型。NDK中关于JNI数据类型的定义都在jni.h中，大家可以参考jni.h。jni.h在ndk中的路径参考：android-ndk-r7b/platforms/android-14/arch-arm/usr/include/jni.h1 基本数据类型为了使用方便，JNI还提供了以下定义：#define JNI_FALSE 0#define JNI_TRUE 1typedef jint jsize;2 引用类型3 数组类型4 Java虚拟机类型将JNI注册到Java时，会首先注册到Java虚拟机。Java虚拟.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094037.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094250.html</id>
    <title type="text">        Android JNI和NDK学习(05)--JNI真机调试</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094250.html"/>
    <content type="html">摘要：Android JNI和NDK学习(05)--JNI真机调试本文主要介绍如何将JNI导入到真机进行调试。下面以MyNdk工程来说明。1 将.so文件导入到手机中将MyNdk工程的libhello_jni.so文件导入到手机的/system/lib/目录下，通过以下命令:$ adb push libhello_jni.so /system/lib/liehello_jni.so2 安装apk到手机中$ adb install MyNdk.apk这样，就可以在手机上正常的运行MyNdk.apk了。        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3094250.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092812.html</id>
    <title type="text">        Android JNI和NDK学习(04)--NDK调试方法</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092812.html"/>
    <content type="html">摘要：Android JNI和NDK学习(04)--NDK调试方法本文主要介绍在ndk中添加log的方法。然后，我们就可以通过log去调试ndk。1 添加ndk对log支持若需要添加ndk对log的支持，只需要通过以下2步即可实现。1.1 修改Android.mk如生成的库文件是“.so文件”，则在Android.mk中添加如下内容：LOCAL_LDLIBS:=-L$(SYSROOT)/usr/lib -llog如生成的库文件是“.a文件”，则在Android.mk中添加如下内容：LOCAL_LDLIBS:=-llog1.2 在.c或.cpp文件中引用log头文件添加如下内容：// 引入log头文件        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092812.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092491.html</id>
    <title type="text">        Android JNI和NDK学习(03)--动态方式实现JNI</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092491.html"/>
    <content type="html">摘要：Android JNI和NDK学习(03)--动态方式实现JNI前面总结了静态实现JNI的方法，本文介绍如何动态实现JNI：JNI在加载时，会调用JNI_OnLoad，而卸载时会调用JNI_UnLoad，所以我们可以通过在JNI_OnLoad里面注册我们的native函数来实现JNI。下面就介绍该方法。1 Android应用层代码在eclipse中新建工程NdkLoad，工程文件NdkLoad.java的代码如下：package com.skywang.ndk;import android.app.Activity;import android.os.Bundle;import android        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3092491.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095074.html</id>
    <title type="text">        Android JNI和NDK学习(02)--静态方式实现JNI</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095074.html"/>
    <content type="html">摘要：Android JNI和NDK学习(02)--静态方式实现JNIJNI包括两种实现方法：静态和动态。两种方法的区别如下：静态：先由Java得到本地方法的声明，然后再通过JNI实现该声明方法。动态：先通过JNI重载JNI_OnLoad()实现本地方法，然后直接在Java中调用本地方法。本文介绍静态实现方式，下一篇会介绍动态实现方式。1 首先，在Eclipse下新建一个工程myndkMyndk.java的代码如下： 1 package com.skywang.ndk; 2 3 import android.app.Activity; 4 import android.os.Bundle; ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095074.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095013.html</id>
    <title type="text">        Android JNI和NDK学习(01)--搭建NDK开发环境</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095013.html"/>
    <content type="html">摘要：Android JNI和NDK学习(01)--搭建NDK开发环境本文主要介绍“JNI”、“Android NDK”以及“如何搭建Android NDK开发环境”1 JNI介绍JNI是Java Native Interface的缩写，中文为JAVA本地调用。从Java1.1开始，Java Native Interface(JNI)标准成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。2 NDK介绍Android NDK，即Native Development        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/23/3095013.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/19/ubuntu_install.html</id>
    <title type="text">        双系统中ubuntu的安装方法</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/19/ubuntu_install.html"/>
    <content type="html">摘要：双系统中ubuntu的安装方法本文主要介绍，通过grub去安装双系统中ubuntu系统的安装方法。注意：给电脑安装双系统时，一定要先装Windows系统，再安装Linux系统！原因呢？是电脑开机后，要先执行一段bootloader引导程序；再由引导程序启动操作系统。Windows的引导程序和Linux系统的引导程序不同：Windows的引导程序只能识别Windows程序，无法识别到Linux；而Linux的引导程序能识别到不同的操作系统！下面的安装步骤包括的2种情况。情况1： 在“32位的Windows XP/Windows 7”下 安装 “32位的ubuntu 12.04”情况2： 在“64        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/19/ubuntu_install.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char02.html</id>
    <title type="text">        Android中字符设备驱动和应用实例(二) 应用部分</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char02.html"/>
    <content type="html">摘要：Android中字符设备驱动和应用实例(二)——应用部分下面介绍创建Android设备字符设备驱动对应的应用程序1 应用程序在此示例中，我们将应用程序的代码放置在android目录的packages/app/mem_test目录下面。其中，mem_test是新建的目录。（1）应用程序的路径如下：packages/app/mem_test/mem_test.c（2）应用程序的内容如下： 1 #include 2 #include 3 #include 4 #include 5 #include 6 #include 7 8 9 #define BUFFERSIZE ...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char02.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char01.html</id>
    <title type="text">        Android中字符设备驱动和应用实例(一) 驱动部分</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char01.html"/>
    <content type="html">摘要：Android中字符设备驱动和应用实例(一)——驱动部分下面介绍创建Android设备对应的字符设备驱动1 字符驱动在此示例中，我们将字符驱动添加到drivers/char目录下。（1）字符驱动的路径如下：drivers/char/class_reg_unreg.c（2）字符驱动的内容如下： 1 #include &amp;lt;linux/module.h&amp;gt; 2 #include &amp;lt;linux/init.h&amp;gt; 3 #include &amp;lt;linux/kernel.h&amp;gt; 4 #include &amp;lt;linux/slab.h&amp;gt; 5 #include &amp;lt;linux/        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_char01.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_class.html</id>
    <title type="text">        linux中class_create和class_register说明</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_class.html"/>
    <content type="html">摘要：linux中class_create和class_register说明本文介绍linux中class_create和class_register的相关使用方法1 class结构体介绍 内核中定义了struct class结构体，顾名思义，一个struct class结构体类型变量对应一个类，内核同时提供了class_create(…)函数，可以用它来创建一个类，这个类存放于sysfs下面，一旦创建好了这个类，再调用device_create(…)函数来在/dev目录下创建相应的设备节点。这样，加载模块的时候，用户空间中的udev会自动响应device_create(…)函数，去/sysfs下.        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_class.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/14/Driver_config.html</id>
    <title type="text">        [转载] make menuconfig/.config/Kconfig解析</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/14/Driver_config.html"/>
    <content type="html">摘要：[转载]make menuconfig/.config/Kconfig解析在对linux进行编译，常用的命令是make menuconfig，使用图形界面来对整个系统进行裁剪。当然，除了这条指令，还包括很多配置命令，比如make defconfig, make oldconfig等。这里主要就make menuconfig的执行过程进行解析。一．准备工作包括(交叉)编译环境的建立，linux源码的下载与解压等。二．初步介绍 跟make menuconfig这个命令相关的文件，包括三类，包括.config，Kconfig，Makefile。为什么不说三个，而说三类呢？因为Kconfig和Make        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/14/Driver_config.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroiDriver_menuconfig.html</id>
    <title type="text">        Android中添加驱动的方法</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroiDriver_menuconfig.html"/>
    <content type="html">摘要：Android 添加驱动的两种方式下面介绍，在Android系统中如何将驱动添加到kernel中。要求：将驱动queue.c添加kernel中。方案：下面介绍2种实现方案。2种方案的本质是一样的，区别是一种在menuconfig中单独建立菜单，而另一种则不在menuconfig中单独新建菜单，而是修改已有的配置文件。1方案一方案一中，采取的方法是：不新建config菜单，直接将驱动添加到已有的Kconfig中。下面介绍详细步骤。1.1修改已有配置文件（1）修改配置文件driver/char/Kconfig，添加如下内容：config SKYWANG_CQUEUE tristate &amp;quot;        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroiDriver_menuconfig.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroidDriver_Hello.html</id>
    <title type="text">        Android简单驱动示例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroidDriver_Hello.html"/>
    <content type="html">摘要：Android 简单驱动示例下面介绍在Android手机上添加简单的驱动示例程序1新建驱动程序新建程序文件hello.c(1) hello.c的路径如下：drivers/char/hello.c(2) hello.c的内容如下： 1 #include &amp;lt;linux/init.h&amp;gt; 2 #include &amp;lt;linux/module.h&amp;gt; 3 4 static int __init hello_init(void) 5 { 6 printk(&amp;quot;%s\n&amp;quot;, __FUNCTION__); 7 return 0; 8 } 9 10 static void _        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/14/AndroidDriver_Hello.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/14/linux_pc_helloworld.html</id>
    <title type="text">        Linux PC端驱动实例</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/14/linux_pc_helloworld.html"/>
    <content type="html">摘要：Linux PC端驱动程序实例1新建驱动程序新建程序文件hello.c(1)hello.c的路径如下：helloworld/hello.c(2)hello.c的内容如下： 1 #include &amp;lt;linux/init.h&amp;gt; 2 #include &amp;lt;linux/module.h&amp;gt; 3 4 static int __init hello_init(void) 5 { 6 printk(&amp;quot;%s\n&amp;quot;, __FUNCTION__); 7 return 0; 8 } 9 10 static void __exit hello_exit(void)11 {12         &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/14/linux_pc_helloworld.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/05/02/videocommonsense.html</id>
    <title type="text">        视频常识</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/05/02/videocommonsense.html"/>
    <content type="html">摘要：视频常识版本修改内容日期修改人V1.0原始版本2013/05/02skywang 1 视频基础概念码流(码率)：是指视频文件在单位时间内使用的数据流量。同样分辨率下，视频文件的码流越大，压缩比就越小，画面质量就越好。帧率：每秒显示的图片数分辨率：图像的尺寸(长和宽)2 码流和压缩比以H.264为例H.264是一种视频高压缩技术，全称是MPEG-4 AVC，用中文说是“活动图像专家组-4的高等视频编码”，或称为MPEG-4 Part10。它是由国际电信标准化部门ITU-T和规定MPEG的国际标准化组织ISO/国际电工协会IEC共同制订的一种活动图像编码方式的国际标准格式， H.264最大的...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/05/02/videocommonsense.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/16/3165548.html</id>
    <title type="text">        ubuntu下多工程的环境变量配置方法</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/16/3165548.html"/>
    <content type="html">摘要：ubuntu下多工程的环境变量配置方法版本版本说明发布时间发布人V1.0初始版本2013-03-16Skywang1概要在我们的日常工作中。随着我们工作的项目的增多，可能会遇到以下问题：第一，经常需要在各个目录间来回切换。每次来回切换，需要输入很长的指令！第二，不同的项目所需的配置信息不同，而我们经常需要导入不同的配置信息。重复导入配置信息，很费时！如果你遇到上面所说的问题，并且被这些问题所困扰。可以试试阅读本文，希望文中的方法能帮助您解决上诉问题。本文主要就我自己在ubuntu下管理不同项目的方法进行了说明：根据不同的项目导入不同配置；然后，可以非常方便快捷的在不同项目之间来回切换。比如：有        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/03/16/3165548.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165549.html</id>
    <title type="text">        Intent总结06 category属性</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165549.html"/>
    <content type="html">摘要：Intent总结04 Data和Type属性1 介绍data和type的作用请参考“Intent总结01 Intent的结构”。下面用代码对intent的data、type属性进行介绍。主要介绍的内容是，如何定义intent的data、type属性，并如何调用。2 示例和说明程序结构如下：主界面如下：我们在AndroidManifest中自定义一个类，并定义对应的data和type。如下： 2.1 示例一有了上述定义之后，我们可以通过如下方...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165551.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165550.html</id>
    <title type="text">        Intent总结05  extra属性</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165550.html"/>
    <content type="html">摘要：Intent总结01 Intent的结构Intent对象由component、Action、Data、Category、Component和Extra等属性组成组成。下面，分别对各个属性进行介绍说明。1 Component 明确指定类名，用于跳转。通过setComponent(ComponentName)或setClass(Context, Class)等设置Intent的component(即组成成分)，来指定一个明确的类进行跳转。通过设置component的intent是显式意图，即Explicit Intents；其余的都是隐式意图，Implicit Intents。2 Action .        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165554.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165551.html</id>
    <title type="text">        Intent总结04 Data和Type属性</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165551.html"/>
    <content type="html">摘要：Android Bundle总结版本修改内容日期修改人1.0初稿2013/03/06skywang1 Bundle介绍Bundle主要用于传递数据；它保存的数据，是以key-value(键值对)的形式存在的。我们经常使用Bundle在Activity之间传递数据，传递的数据可以是boolean、byte、int、long、float、double、string等基本类型或它们对应的数组，也可以是对象或对象数组。当Bundle传递的是对象或对象数组时，必须实现Serializable或Parcelable接口。下面分别介绍Activity之间如何传递基本类型、传递对象。2传递基本类型Bundle        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/03/06/3165555.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165552.html</id>
    <title type="text">        Intent总结03 Action属性</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165552.html"/>
    <content type="html">摘要：SharedPreferences数据存储 版本修改内容日期修改人V1.0原始版本2013/2/20skywang 1 SharedPreferences概括SharedPreferences是Android平台上一个轻量级的存储类，主要是保存一些常用的配置比如窗口状态，一般在Activity中 重载窗口状态onSaveInstanceState保存一般使用SharedPreferences完成，它提供了Android平台常规的Long长 整形、Int整形、String字符串型的保存。 它的本质是基于XML文件存储key-value键值对数据，通常用来存储一些简单的配置信息。 其存...        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/02/28/2936038.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165553.html</id>
    <title type="text">        Intent总结02 component和显式意图</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165553.html"/>
    <content type="html">摘要：JavaIO总结版本修改内容日期修改人V1.0原始版本2013-02-24skywang1 Java IO版本Java库的IO分为输入/输出两部分。早期的Java 1.0版本的输入系统是InputStream及其子类，输出系统是OutputStream及其子类。后来的Java 1.1版本对IO系统进行了重新设计。输入系统是Reader及其子类，输出系统是Writer及其子类。Java1.1之所以要重新设计，主要是为了添加国际化支持(即添加了对16位Unicode码的支持)。具体表现为Java 1.0的IO系统是字节流，而Java 1.1的IO系统是字符流。字节流，就是数据流中最小的数据单元是8        &lt;a href=&quot;https://www.cnblogs.com/skywang12345/archive/2013/02/24/2936044.html&quot; class=&quot;c_b_p_desc_readmore&quot;&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165554.html</id>
    <title type="text">        Intent总结01 Intent的结构</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/10/3165554.html"/>
    <content type="html"></content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/03/06/3165555.html</id>
    <title type="text">        Android Bundle总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/03/06/3165555.html"/>
    <content type="html"></content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/02/28/2936038.html</id>
    <title type="text">        Android数据存储01之 SharedPreferences</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/02/28/2936038.html"/>
    <content type="html"></content>
  </entry>
  <entry>
    <id>https://www.cnblogs.com/skywang12345/archive/2013/02/24/2936044.html</id>
    <title type="text">        Java IO系统总结</title>
    <link type="text/html" rel="alternate" href="https://www.cnblogs.com/skywang12345/archive/2013/02/24/2936044.html"/>
    <content type="html"></content>
  </entry>
</feed>